@using Financeiro.Models
@model Financeiro.Models.ViewModels.AditivoViewModel

@{
    ViewBag.Title = "Registrar Aditivo";
    Layout = "_Layout";
    var atual = ViewBag.VersaoAtual as AcordoVersao;
}

<div class="container py-4">
    <div class="text-center mb-4">
        <h2 class="fw-bold text-primary">@ViewBag.Title</h2>
        <p class="text-muted">Preencha os dados do novo aditivo para o acordo abaixo.</p>
    </div>

    @if (atual != null)
    {
        <div class="alert alert-info shadow-sm">
            <strong>Versão Atual (v@(atual.Versao)):</strong><br />
            Valor: <span class="fw-semibold">@atual.Valor.ToString("C")</span> |
            Vigência: <span class="fw-semibold">@atual.VigenciaInicio:dd/MM/yyyy</span> -
            <span class="fw-semibold">@(atual.VigenciaFim?.ToString("dd/MM/yyyy") ?? "atual")</span>
        </div>
    }

    <div asp-validation-summary="All" class="alert alert-danger" role="alert"></div>

    <form asp-action="Salvar" method="post" class="row g-3 bg-light p-4 rounded shadow-sm border">
        @Html.AntiForgeryToken()
        <input asp-for="TipoAcordoId" type="hidden" />

        <div class="col-md-4">
            <label asp-for="TipoAditivo" class="form-label fw-semibold"></label>
            <select asp-for="TipoAditivo"
                    asp-items="Html.GetEnumSelectList<TipoAditivo>()"
                    class="form-select"
                    id="selectTipo">
                <option value="">-- selecione --</option>
            </select>
            <span asp-validation-for="TipoAditivo" class="text-danger small"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="NovoValor" class="form-label fw-semibold"></label>
            <input asp-for="NovoValor" type="number" step="0.01" class="form-control" id="NovoValor" />
            <span asp-validation-for="NovoValor" class="text-danger small"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="NovaDataInicio" class="form-label fw-semibold"></label>
            <input asp-for="NovaDataInicio" type="date" class="form-control" id="NovaDataInicio" />
            <span asp-validation-for="NovaDataInicio" class="text-danger small"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="NovaDataFim" class="form-label fw-semibold"></label>
            <input asp-for="NovaDataFim" type="date" class="form-control" id="NovaDataFim" />
            <span asp-validation-for="NovaDataFim" class="text-danger small"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="DataAssinatura" class="form-label fw-semibold"></label>
            <input asp-for="DataAssinatura" type="date" class="form-control" id="DataAssinatura" />
            <span asp-validation-for="DataAssinatura" class="text-danger small"></span>
        </div>

        <div class="col-12">
            <label asp-for="Observacao" class="form-label fw-semibold"></label>
            <textarea asp-for="Observacao" rows="2" class="form-control" placeholder="Observações adicionais..."></textarea>
            <span asp-validation-for="Observacao" class="text-danger small"></span>
        </div>

        <div class="col-12 mt-2">
            <button type="submit" class="btn btn-success me-2">
                <i class="bi bi-check-circle"></i> Salvar Aditivo
            </button>
            <a asp-controller="TipoAcordos"
               asp-action="Editar"
               asp-route-id="@Model.TipoAcordoId"
               class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left-circle"></i> Cancelar
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        (function () {
            const select = document.getElementById('selectTipo');
            const campoValor  = document.getElementById('NovoValor')?.closest('.col-md-4');
            const campoInicio = document.getElementById('NovaDataInicio')?.closest('.col-md-4');
            const campoFim    = document.getElementById('NovaDataFim')?.closest('.col-md-4');

            // Função robusta: funciona tanto se o Enum renderizar value numérico quanto texto
            function getSelectedKey() {
                if (!select) return '';
                const opt = select.options[select.selectedIndex];
                // valor (geralmente numérico) e texto (nome do enum)
                const val = (opt?.value || '').trim();
                const txt = (opt?.text || '').trim();
                return { val, txt };
            }

            function toggleCampos() {
                const { val, txt } = getSelectedKey();

                // Checa por texto do Enum (Prazo, Acréscimo, Supressão, etc.)
                // e também permite mapear por value se você quiser no futuro.
                const key = (txt || '').toLowerCase();

                const isPrazo =
                    key.includes('prazo');

                const isValor =
                    key.includes('acréscimo') || key.includes('acrescimo') ||
                    key.includes('supressão') || key.includes('supressao');

                // Para casos compostos (PrazoAcrescimo / PrazoSupressao)
                const alteraPrazo = isPrazo;
                const alteraValor = isValor || (isPrazo && (key.includes('acrésc') || key.includes('acresc') || key.includes('supress')));

                if (campoValor)  campoValor.style.display  = alteraValor ? '' : 'none';
                if (campoInicio) campoInicio.style.display = alteraPrazo ? '' : 'none';
                if (campoFim)    campoFim.style.display    = alteraPrazo ? '' : 'none';
            }

            if (select) {
                select.addEventListener('change', toggleCampos);
                document.addEventListener('DOMContentLoaded', toggleCampos);
                // Executa uma vez imediatamente (caso a página carregue com valor selecionado)
                toggleCampos();
            }
        })();
    </script>
}