@model Financeiro.Models.ViewModels.OrcamentoViewModel

@{
    ViewData["Title"] = Model.Id == 0 ? "Novo Orçamento" : "Editar Orçamento";
}

<h3>@ViewData["Title"]</h3>
<hr />

<form id="orcamento-form"
      asp-action="@(Model.Id == 0 ? "Salvar" : "Atualizar")"
      method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />
    <input type="hidden" id="detalhamentoJsonInput" name="detalhamentoJson" />
    <input type="hidden" id="justificativa" name="justificativa" />

    <div class="row">
        <div class="col-12 mb-3">
            <label asp-for="Nome" class="form-label"></label>
            <input asp-for="Nome" class="form-control" />
            <span asp-validation-for="Nome" class="text-danger"></span>
        </div>
    </div>

    <div class="row">
        <div class="col-12 mb-3">
            <label asp-for="ValorPrevistoTotal" class="form-label"></label>
            <input asp-for="ValorPrevistoTotal" id="ValorPrevistoTotal" class="form-control" readonly />
            <span asp-validation-for="ValorPrevistoTotal" class="text-danger"></span>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label asp-for="VigenciaInicio" class="form-label"></label>
            <input asp-for="VigenciaInicio" class="form-control" type="date" />
            <span asp-validation-for="VigenciaInicio" class="text-danger"></span>
        </div>
        <div class="col-md-6 mb-3">
            <label asp-for="VigenciaFim" class="form-label"></label>
            <input asp-for="VigenciaFim" class="form-control" type="date" />
            <span asp-validation-for="VigenciaFim" class="text-danger"></span>
        </div>
    </div>

    <div class="row">
        <div class="col-12 mb-3">
            <label asp-for="Observacao" class="form-label"></label>
            <textarea asp-for="Observacao" class="form-control" rows="3"></textarea>
            <span asp-validation-for="Observacao" class="text-danger"></span>
        </div>
    </div>

    <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" asp-for="Ativo" />
        <label class="form-check-label" asp-for="Ativo"></label>
    </div>

    <hr />

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>Detalhamento do Orçamento</h4>
        <button type="button"
                class="btn btn-info"
                data-bs-toggle="modal"
                data-bs-target="#modalDetalhamento">
            Gerenciar Detalhamento
        </button>
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary">Salvar</button>
        <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
    </div>
</form>

<div class="modal"
     id="modalDetalhamento"
     tabindex="-1"
     aria-labelledby="modalLabel"
     aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Detalhamento do Orçamento</h5>
                <button type="button"
                        class="btn btn-primary ms-auto"
                        id="btn-adicionar-nivel">
                    + Adicionar Nível
                </button>
            </div>
            <div class="modal-body">
                <div id="arvore-container"></div>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-secondary"
                        data-bs-dismiss="modal">
                    Cancelar
                </button>
                <button type="button"
                        class="btn btn-warning"
                        id="btn-abrir-modal-nivel">
                    Cadastrar Novo Nível
                </button>
                <div id="modal-nivel-placeholder"></div>
                <button type="button"
                        class="btn btn-primary"
                        id="salvar-detalhamento">
                    Confirmar Detalhes
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const hasSwal = typeof window.Swal !== 'undefined';

        // ---------- VARIÁVEIS ----------
        let detalhamento = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Detalhamento ?? new List<Financeiro.Models.ViewModels.OrcamentoDetalheViewModel>()));
        const form = document.getElementById('orcamento-form');
        const arvoreContainer = document.getElementById('arvore-container');
        const btnAdicionarNivel = document.getElementById('btn-adicionar-nivel');
        const btnSalvarDetalhamento = document.getElementById('salvar-detalhamento');
        const btnAbrirNovoNivel = document.getElementById('btn-abrir-modal-nivel');
        const valorTotalInput = document.getElementById('ValorPrevistoTotal');
        const detalhamentoJsonInput = document.getElementById('detalhamentoJsonInput');
        const justificativaHidden = document.getElementById('justificativa');

        // ---------- SWEETALERT: TempData ----------
        const msgSucesso = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["Sucesso"]));
        const msgErro = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["Erro"]));
        const msgAlerta = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["Alerta"]));
        if (hasSwal) {
            if (msgSucesso) Swal.fire({ icon: 'success', title: 'Sucesso', text: msgSucesso });
            if (msgErro) Swal.fire({ icon: 'error', title: 'Ops', text: msgErro });
            if (msgAlerta) Swal.fire({ icon: 'warning', title: 'Atenção', text: msgAlerta });
        }

        // ---------- FUNÇÕES -----------
        const norm = s => (s ?? '').toString().trim().toLowerCase();

        function toBR(n) {
            return (n || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

        function calcularTotaisNosDados() {
            function subtotal(node) {
                if (!node.Filhos || node.Filhos.length === 0)
                    return parseFloat(node.ValorPrevisto) || 0;
                let soma = 0;
                node.Filhos.forEach(c => soma += subtotal(c));
                node.ValorPrevisto = soma;
                return soma;
            }
            const total = detalhamento.reduce((a, n) => a + subtotal(n), 0);
            valorTotalInput.value = total.toFixed(2);
            if (!valorTotalInput.value) valorTotalInput.value = "0.00";
            return total;
        }

        function escapeHtml(s) {
            return (s ?? '').replace(/[&<>"']/g, m => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m]));
        }

        function criarNodeElemento(node, path) {
            const indent = (path.length - 1) * 25;
            const div = document.createElement('div');
            div.className = 'orcamento-node';
            div.style.marginLeft = `${indent}px`;
            div.dataset.path = path.join('-');
            const isParent = node.Filhos && node.Filhos.length > 0;
            const isL3 = path.length >= 3;
            const nivelHierarquico = path.length;
            let initialOption = '';
            const optVal = (node.NivelId ?? '').toString().trim();
            if (optVal) {
                initialOption = `<option value="${escapeHtml(optVal)}" selected>${escapeHtml(node.Nome || '')}</option>`;
            } else if (node.Nome) {
                initialOption = `<option value="${escapeHtml(node.Nome)}" selected>${escapeHtml(node.Nome)}</option>`;
            }
            div.innerHTML = `
                <div class="d-flex align-items-center mb-1 p-2 border rounded">
                    <div class="flex-grow-1">
                        <select class="form-control form-control-sm mb-1 select2-niveis"
                                data-prop="Nome"
                                data-nivel="${nivelHierarquico}">
                            ${initialOption}
                        </select>
                        <input type="number"
                               class="form-control form-control-sm"
                               data-prop="ValorPrevisto"
                               value="${parseFloat(node.ValorPrevisto || 0).toFixed(2)}"
                               step="0.01"
                               placeholder="Valor"
                               ${isParent ? 'readonly style="background-color:#e9ecef;"' : ''}>
                    </div>
                    <div class="ms-2">
                        ${!isL3 ? `<button type="button" class="btn btn-sm btn-success" data-action="add-child" title="Adicionar Filho">+</button>` : ''}
                        <button type="button" class="btn btn-sm btn-danger" data-action="remove" title="Remover">x</button>
                    </div>
                </div>`;
            if (isParent) {
                const filhosDiv = document.createElement('div');
                filhosDiv.className = 'orcamento-node-children';
                node.Filhos.forEach((c, i) =>
                    filhosDiv.appendChild(criarNodeElemento(c, [...path, i])));
                div.appendChild(filhosDiv);
            }
            return div;
        }

        function inicializarSelect2ParaElemento($select) {
            const nivel = $select.data('nivel');
            $select.select2({
                theme: 'bootstrap-5',
                dropdownParent: $('#modalDetalhamento'),
                placeholder: 'Digite para buscar um nível...',
                minimumInputLength: 1,
                allowClear: true,
                ajax: {
                    url: '/Niveis/Search',
                    dataType: 'json',
                    delay: 250,
                    cache: false,
                    data: params => ({ term: params.term, nivel }),
                    processResults: data => ({ results: data.results })
                }
            });
        }

        function inicializarSelect2() {
            $('.select2-niveis').each(function () { inicializarSelect2ParaElemento($(this)); });
        }

        function renderizarArvore() {
            arvoreContainer.innerHTML = '';
            detalhamento.forEach((n, i) =>
                arvoreContainer.appendChild(criarNodeElemento(n, [i])));
            inicializarSelect2();
        }
        window.renderizarArvore = renderizarArvore;

        function getNode(pathArr) {
            let n = { Filhos: detalhamento };
            for (const i of pathArr) {
                if (!n.Filhos || !n.Filhos[i]) return null;
                n = n.Filhos[i];
            }
            return n;
        }

        function atualizarReadonlyValores() {
            document.querySelectorAll('.orcamento-node input[data-prop="ValorPrevisto"][readonly]')
            .forEach(inp => {
                const path = inp.closest('.orcamento-node').dataset.path.split('-').map(Number);
                const n = getNode(path);
                if (n) inp.value = parseFloat(n.ValorPrevisto || 0).toFixed(2);
            });
        }

        function clearInvalidVisual(selectEl) {
            selectEl.classList.remove('is-invalid');
            const $cont = $(selectEl).next('.select2-container');
            $cont.find('.select2-selection').removeClass('border border-danger');
        }

        function markInvalidByPath(pathStr) {
            const el = arvoreContainer.querySelector(`.orcamento-node[data-path="${pathStr}"] select[data-prop="Nome"]`);
            if (!el) return;
            el.classList.add('is-invalid');
            const $cont = $(el).next('.select2-container');
            $cont.find('.select2-selection').addClass('border border-danger');
        }

        function sameLevelKey(n) {
            const idStr = (n?.NivelId ?? '').toString().trim();
            if (idStr) return `id:${idStr.toLowerCase()}`;
            const nm = norm(n?.Nome);
            return nm ? `nm:${nm}` : '';
        }

        function keyFromSelect(id, text) {
            const idStr = (id ?? '').toString().trim();
            return idStr ? `id:${idStr.toLowerCase()}` : `nm:${norm(text)}`;
        }

        function syncSelectionsIntoData() {
            document.querySelectorAll('.orcamento-node select[data-prop="Nome"]').forEach(sel => {
                const path = sel.closest('.orcamento-node').dataset.path.split('-').map(Number);
                const node = getNode(path);
                if (!node) return;
                const data = $(sel).select2('data') || [];
                if (data.length) {
                    const id = (data[0].id ?? '').toString().trim();
                    const txt = (data[0].text ?? '').toString().trim();
                    node.NivelId = id;
                    node.Nome = txt;
                }
            });
        }

        function validateAllSelected() {
            const faltantes = [];
            function walk(arr, prefix) {
                arr.forEach((n, i) => {
                    const path = (prefix ? prefix + '-' : '') + i;
                    const hasId = n && n.NivelId !== undefined && n.NivelId !== null && String(n.NivelId).trim() !== '';
                    const hasName = n && (n.Nome ?? '').toString().trim() !== '';
                    const ok = hasId || hasName;
                    if (!ok) faltantes.push(path);
                    if (n?.Filhos?.length) walk(n.Filhos, path);
                });
            }
            walk(detalhamento, '');

            if (faltantes.length) {
                faltantes.forEach(markInvalidByPath);
                const msg = 'Obrigatório selecionar todos os níveis (incluindo subníveis).';
                if (hasSwal) Swal.fire({ icon: 'warning', title: 'Atenção', text: msg });
                else alert(msg);
                const first = faltantes[0];
                const el = arvoreContainer.querySelector(`.orcamento-node[data-path="${first}"] select[data-prop="Nome"]`);
                if (el) $(el).select2('open');
                return false;
            }
            return true;
        }

        function validateGlobalDuplicates() {
            const mapDepth = new Map();
            const dups = [];
            function walk(arr, depth, prefix) {
                arr.forEach((n, i) => {
                    const key = sameLevelKey(n);
                    if (key) {
                        if (!mapDepth.has(depth)) mapDepth.set(depth, new Set());
                        const set = mapDepth.get(depth);
                        const path = (prefix ? prefix + '-' : '') + i;
                        if (set.has(key)) dups.push({ depth, name: n.Nome, path });
                        else set.add(key);
                    }
                    if (n?.Filhos?.length) walk(n.Filhos, depth + 1, (prefix ? prefix + '-' : '') + i);
                });
            }
            walk(detalhamento, 1, '');
            if (dups.length) {
                dups.forEach(d => markInvalidByPath(d.path));
                const msg = `Não é permitido repetir o mesmo nível no mesmo nível hierárquico. Ex.: ${dups[0].name} (nível ${dups[0].depth}).`;
                if (hasSwal) Swal.fire({ icon: 'error', title: 'Duplicidade de nível', text: msg });
                else alert(msg);
                return false;
            }
            return true;
        }

        // ---------- EVENTOS -----------
        
        // CORRIGIDO: Adiciona apenas o novo elemento sem redesenhar a árvore inteira.
        btnAdicionarNivel.addEventListener('click', () => {
            const novoNodeData = { NivelId: '', Nome: '', ValorPrevisto: 0, Filhos: [] };
            detalhamento.push(novoNodeData);
            
            const novoNodePath = [detalhamento.length - 1];
            const novoElemento = criarNodeElemento(novoNodeData, novoNodePath);
            
            arvoreContainer.appendChild(novoElemento);
            inicializarSelect2ParaElemento($(novoElemento).find('.select2-niveis'));
        });

        // CORRIGIDO: Adiciona/Remove elementos específicos sem redesenhar a árvore inteira.
        arvoreContainer.addEventListener('click', e => {
            const btn = e.target.closest('button[data-action]');
            if (!btn) return;
            const elem = btn.closest('.orcamento-node');
            const path = elem.dataset.path.split('-').map(Number);
            const act = btn.dataset.action;

            if (act === 'add-child') {
                const pNode = getNode(path);
                if (!pNode) return;
                pNode.Filhos = pNode.Filhos || [];
                const novoFilhoData = { NivelId: '', Nome: '', ValorPrevisto: 0, Filhos: [] };
                pNode.Filhos.push(novoFilhoData);
                const novoFilhoPath = [...path, pNode.Filhos.length - 1];
                const novoElemento = criarNodeElemento(novoFilhoData, novoFilhoPath);
                let childrenContainer = elem.querySelector('.orcamento-node-children');
                if (!childrenContainer) {
                    childrenContainer = document.createElement('div');
                    childrenContainer.className = 'orcamento-node-children';
                    elem.appendChild(childrenContainer);
                }
                childrenContainer.appendChild(novoElemento);
                inicializarSelect2ParaElemento($(novoElemento).find('.select2-niveis'));
                const parentInput = elem.querySelector('input[data-prop="ValorPrevisto"]');
                parentInput.readOnly = true;
                parentInput.style.backgroundColor = '#e9ecef';
            } else if (act === 'remove') {
                const parentPath = path.slice(0, -1);
                const idx = path[path.length - 1];
                if (parentPath.length === 0) {
                    detalhamento.splice(idx, 1);
                } else {
                    const p = getNode(parentPath);
                    if (p) p.Filhos.splice(idx, 1);
                }
                elem.remove();
            }
            syncSelectionsIntoData();
            calcularTotaisNosDados();
            atualizarReadonlyValores();
        });

        arvoreContainer.addEventListener('change', e => {
            const select = e.target.closest('select[data-prop="Nome"]');
            if (!select) return;
            clearInvalidVisual(select);
            const data = $(select).select2('data');
            const idRaw = data && data.length ? data[0].id : null;
            const txt = data && data.length ? (data[0].text || '').trim() : '';
            const idStr = (idRaw ?? '').toString().trim();
            const currentPath = select.closest('.orcamento-node').dataset.path.split('-').map(Number);
            const currentNode = getNode(currentPath);
            const depth = currentPath.length;
            if (!idStr) { if (currentNode) { currentNode.NivelId = ''; currentNode.Nome = ''; } return; }
            const currentIndex = currentPath[currentPath.length - 1];
            const parentPath = currentPath.slice(0, -1);
            let siblings;
            if (parentPath.length === 0) siblings = detalhamento;
            else { const parentNode = getNode(parentPath); siblings = parentNode ? parentNode.Filhos : []; }
            const keyNew = keyFromSelect(idStr, txt);
            const isDuplicateSibling = siblings.some((sibling, index) => index !== currentIndex && sameLevelKey(sibling) === keyNew);
            if (isDuplicateSibling) {
                const msg = 'Este nível já foi adicionado neste agrupamento. Por favor, escolha outro.';
                if (hasSwal) Swal.fire({ icon: 'warning', title: 'Duplicado no mesmo pai', text: msg }); else alert(msg);
                $(select).val(null).trigger('change.select2');
                if (currentNode) { currentNode.NivelId = ''; currentNode.Nome = ''; }
                return;
            }
            const pathStr = currentPath.join('-');
            let found = 0;
            (function walk(arr, d, prefix) {
                arr.forEach((n, i) => {
                    const p = (prefix ? prefix + '-' : '') + i;
                    if (d === depth && p !== pathStr && sameLevelKey(n) === keyNew) found++;
                    if (n?.Filhos?.length) walk(n.Filhos, d + 1, p);
                });
            })(detalhamento, 1, '');
            if (found > 0) {
                const msg = `O nível "${txt}" já foi usado no nível ${depth} deste orçamento.`;
                if (hasSwal) Swal.fire({ icon: 'error', title: 'Duplicidade de nível', text: msg }); else alert(msg);
                $(select).val(null).trigger('change.select2');
                if (currentNode) { currentNode.NivelId = ''; currentNode.Nome = ''; }
                return;
            }
            if (currentNode) { currentNode.NivelId = idStr; currentNode.Nome = txt; }
        });

        arvoreContainer.addEventListener('input', e => {
            const inputValor = e.target.closest('input[data-prop="ValorPrevisto"]');
            if (!inputValor) return;
            const path = inputValor.closest('.orcamento-node').dataset.path.split('-').map(Number);
            const node = getNode(path);
            if (node) node.ValorPrevisto = parseFloat(inputValor.value) || 0;
            calcularTotaisNosDados();
            atualizarReadonlyValores();
        });
        
        let ultimoNivelFocado = 1;
        arvoreContainer.addEventListener('focusin', e => {
            const select = e.target.closest('.select2-niveis');
            if (select) ultimoNivelFocado = parseInt(select.dataset.nivel) || 1;
        });

        btnAbrirNovoNivel.addEventListener('click', () => {
            const nivel = ultimoNivelFocado || 1;
            const $placeholder = $('#modal-nivel-placeholder');
            $.get('/Niveis/NovoNivelPartial', { nivel })
                .done(html => {
                    $placeholder.html(html);
                    const $modal = $placeholder.find('.modal');
                    const $form = $placeholder.find('form');
                    if ($.validator && $.validator.unobtrusive) {
                        $.validator.unobtrusive.parse($form);
                    }
                    $form.on('submit', function (e) {
                        e.preventDefault();
                        if (!$form.valid()) {
                            return;
                        }
                        $.ajax({
                            url: $form.attr('action'),
                            type: $form.attr('method'),
                            data: $form.serialize(),
                            success: function (response) {
                                const modalInstance = bootstrap.Modal.getInstance($modal[0]);
                                modalInstance.hide();
                                Swal.fire({ icon: 'success', title: 'Sucesso!', text: response.message });
                            },
                            error: function (xhr) {
                                let mensagemErro = "Ocorreu uma falha ao salvar.";
                                if (xhr.status === 409) {
                                    mensagemErro = xhr.responseText;
                                    Swal.fire({ icon: 'error', title: 'Item duplicado', text: mensagemErro });
                                } else if (xhr.status === 400) {
                                    $form.find(".field-validation-error").text("");
                                    const errorData = xhr.responseJSON;
                                    for (const key in errorData) {
                                        if (errorData.hasOwnProperty(key)) {
                                            const normalizedKey = key.charAt(0).toUpperCase() + key.slice(1);
                                            $form.find(`span[data-valmsg-for="${normalizedKey}"]`).text(errorData[key][0]);
                                        }
                                    }
                                } else {
                                    Swal.fire({ icon: 'error', title: 'Ops...', text: mensagemErro });
                                }
                            }
                        });
                    });
                    $modal.on('hidden.bs.modal', function () {
                        $(this).remove();
                    });
                    const modal = new bootstrap.Modal($modal[0]);
                    modal.show();
                })
                .fail(() => {
                    Swal.fire({ icon: 'error', title: 'Erro', text: 'Falha ao carregar o formulário de cadastro de nível.' });
                });
        });

        btnSalvarDetalhamento.addEventListener('click', () => {
            document.querySelectorAll('.select2-niveis.is-invalid').forEach(el => clearInvalidVisual(el));
            syncSelectionsIntoData();
            if (!validateAllSelected()) return;
            if (!validateGlobalDuplicates()) return;

            calcularTotaisNosDados();
            detalhamentoJsonInput.value = JSON.stringify(detalhamento);
            const mElem = document.getElementById('modalDetalhamento');
            const inst = bootstrap.Modal.getInstance(mElem);
            if (inst) inst.hide();
        });

        // ---------- INICIALIZAÇÃO ----------
        calcularTotaisNosDados();
        detalhamentoJsonInput.value = JSON.stringify(detalhamento);
        renderizarArvore();
        syncSelectionsIntoData();
        atualizarReadonlyValores();
    });
    </script>
}