@model IEnumerable<Financeiro.Models.Orcamento>
@using System.Globalization;

@{
    ViewData["Title"] = "Orçamentos";
    var culturaBrasileira = new CultureInfo("pt-BR");
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>@ViewData["Title"]</h3>
    <a asp-action="Novo" class="btn btn-primary">Novo Orçamento</a>
</div>

<table class="table table-striped table-hover">
    <thead class="table-dark">
        <tr>
            <th>Nome</th>
            <th>Observação</th>
            <th>Vigência</th>
            <th>Valor Total</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null && Model.Any())
        {
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Nome</td>
                    <td>@item.Observacao</td>
                    <td>@item.VigenciaInicio.ToShortDateString() a @item.VigenciaFim.ToShortDateString()</td>
                    <td>@item.ValorPrevistoTotal.ToString("C", culturaBrasileira)</td>
                    <td>
                        @if (item.Ativo)
                        {
                            <span class="badge bg-success">Ativo</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Inativo</span>
                        }
                    </td>
                    <td class="text-end">
                        <a asp-action="Editar" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">
                            Editar
                        </a>
                        <button type="button"
                                class="btn btn-sm btn-outline-danger btn-excluir"
                                data-id="@item.Id"
                                data-nome="@item.Nome">
                            Excluir
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center">Nenhum orçamento cadastrado.</td>
            </tr>
        }
    </tbody>
</table>

<!-- ✅ Formulário oculto para POST da exclusão com AntiForgery -->
<form id="form-exclusao" asp-action="Excluir" method="post" class="d-none">
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" id="orcamentoIdExcluir" />
    <input type="hidden" name="justificativa" id="justificativaExclusao" />
</form>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', () => {
    const hasSwal = typeof window.Swal !== 'undefined';

    // ---- SweetAlerts de TempData (sucesso/erro/alerta)
    const msgSucesso = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["Sucesso"] ?? TempData["MensagemSucesso"]));
    const msgErro    = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["Erro"]));
    const msgAlerta  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["Alerta"]));

    if (hasSwal) {
        if (msgSucesso) Swal.fire({ icon:'success', title:'Sucesso', text: msgSucesso });
        if (msgErro)    Swal.fire({ icon:'error',   title:'Ops',     text: msgErro });
        if (msgAlerta)  Swal.fire({ icon:'warning', title:'Atenção', text: msgAlerta });
    }

    // ---- Exclusão com justificativa (SweetAlert textarea)
    const formExclusao = document.getElementById('form-exclusao');
    const inputId      = document.getElementById('orcamentoIdExcluir');
    const inputJust    = document.getElementById('justificativaExclusao');

    document.querySelectorAll('.btn-excluir').forEach(btn => {
        btn.addEventListener('click', async () => {
            const id   = btn.getAttribute('data-id');
            const nome = btn.getAttribute('data-nome') || '';

            if (!hasSwal) {
                const ok = confirm(`Excluir o orçamento "${nome}"?`);
                if (!ok) return;
                const j = prompt('Informe uma justificativa para a exclusão:');
                if (!j) return;
                inputId.value = id;
                inputJust.value = j;
                formExclusao.submit();
                return;
            }

            const { value: text, isConfirmed } = await Swal.fire({
                icon: 'question',
                title: 'Confirmar exclusão',
                html: `<p>Tem certeza que deseja excluir o orçamento <strong>${nome}</strong>?</p><p>Descreva a justificativa:</p>`,
                input: 'textarea',
                inputPlaceholder: 'Motivo da exclusão...',
                inputAttributes: { 'aria-label': 'Motivo da exclusão' },
                inputValidator: (value) => !value ? 'Por favor, informe a justificativa.' : undefined,
                showCancelButton: true,
                confirmButtonText: 'Excluir',
                cancelButtonText: 'Cancelar'
            });

            if (isConfirmed && text) {
                inputId.value = id;
                inputJust.value = text;
                formExclusao.submit();
            }
        });
    });
});
</script>
}