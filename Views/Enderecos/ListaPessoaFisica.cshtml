@model int
@{
    ViewBag.Title = "Endereços da Pessoa Física";
    Layout = "_Layout";
    var pessoaFisicaId = Model;
}

<div class="container py-4">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <div>
            <h2 class="fw-bold text-primary">@ViewBag.Title</h2>
            <p class="text-muted mb-0">Gerencie os endereços vinculados. Apenas um pode ser o principal.</p>
        </div>

        <div class="d-flex gap-2">
            <a class="btn btn-outline-secondary"
               asp-controller="Fornecedores"
               asp-action="Index">
                <i class="bx bx-arrow-back me-1"></i> Voltar
            </a>

            <a class="btn btn-primary"
               asp-controller="Enderecos"
               asp-action="NovoPF"
               asp-route-pessoaId="@pessoaFisicaId">
                <i class="bx bx-plus-circle me-1"></i> Novo Endereço
            </a>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table align-middle" id="tbl-enderecos-pf">
                    <thead class="table-light">
                        <tr>
                            <th style="width:60px;">Principal</th>
                            <th>Logradouro</th>
                            <th style="width:120px;">Número</th>
                            <th>Complemento</th>
                            <th style="width:120px;">CEP</th>
                            <th>Bairro</th>
                            <th>Município</th>
                            <th style="width:80px;">UF</th>
                            <th style="width:180px;" class="text-center">Ações</th>
                        </tr>
                    </thead>
                    <tbody id="tbody-enderecos-pf">
                        <tr><td colspan="9" class="text-muted">Carregando...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Toasters vindos de TempData (Salvar/Atualizar) -->
<div id="pageFlags"
     data-success="@TempData["toast:success"]"
     data-info="@TempData["toast:info"]"></div>

<!-- Antiforgery para POST via AJAX -->
<form id="antiForgeryForm">@Html.AntiForgeryToken()</form>

@section Scripts {
<script>
(function () {
    // ===== URLs geradas por template literal, alinhadas às rotas por atributo
    const urlListar              = `/Enderecos/PessoaFisica/${@pessoaFisicaId}/Listar`;
    const urlPrincipal           = `/Enderecos/PessoaFisica/${@pessoaFisicaId}/Principal`;
    const urlDefinirPrincipalTpl = `/Enderecos/PessoaFisica/${@pessoaFisicaId}/DefinirPrincipal/__ID__`;
    const urlEditarTpl           = `/Enderecos/PessoaFisica/${@pessoaFisicaId}/Editar/__ID__`;
    const urlExcluirTpl          = `/Enderecos/PessoaFisica/${@pessoaFisicaId}/Excluir/__ID__`;

    const $tbody = $("#tbody-enderecos-pf");

    function token() {
        return $("#antiForgeryForm input[name='__RequestVerificationToken']").val();
    }

    // ===== SweetAlert helpers (mesmo padrão da PJ)
    function swalMsg(message, type){
        if (window.SwalDefault?.fire) {
            SwalDefault.fire(message || "", "", type || "info");
        } else if (window.Swal?.fire) {
            Swal.fire({ text: message || "", icon: type || "info" });
        } else { alert(message || ""); }
    }
    function swalConfirm(opts){
        if (window.SwalDelete?.fire) {
            return window.SwalDelete.fire({
                title: opts.title || "Confirmar?",
                text:  opts.text  || "",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: opts.confirmText || "Sim",
                cancelButtonText:  opts.cancelText  || "Cancelar"
            });
        } else if (window.Swal?.fire) {
            return window.Swal.fire({
                title: opts.title || "Confirmar?",
                text:  opts.text  || "",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: opts.confirmText || "Sim",
                cancelButtonText:  opts.cancelText  || "Cancelar"
            });
        } else {
            return Promise.resolve({ isConfirmed: confirm(opts.text || "Confirmar?") });
        }
    }

    // ===== Robustez para "principal"
    function isTrue(v){
        if (v === true) return true;
        if (v === false) return false;
        if (typeof v === 'number') return v !== 0;
        if (typeof v === 'string') {
            const s = v.trim().toLowerCase();
            return s === 'true' || s === '1' || s === 'sim';
        }
        return false;
    }

    // ===== Linha da tabela
    function linhaEndereco(e) {
        const ehPrincipal = isTrue(e.principal ?? e.Principal);

        const estrela = ehPrincipal
            ? `<button type="button" class="btn btn-link p-0" title="Endereço principal" disabled>
                   <i class="bx bxs-star" style="font-size:1.25rem; color:#f5c518;"></i>
               </button>`
            : `<button type="button" class="btn btn-link p-0 btn-definir-principal"
                       data-id="${e.id}" title="Definir como principal">
                   <i class="bx bx-star" style="font-size:1.25rem;"></i>
               </button>`;

        const acoes = `
            <div class="btn-group" role="group">
                <a href="${urlEditarTpl.replace("__ID__", e.id)}"
                   class="btn btn-primary btn-sm" title="Editar">
                    <i class="bx bx-edit-alt me-1"></i>
                    <span>Editar</span>
                </a>
                <button type="button" class="btn btn-outline-danger btn-sm btn-excluir"
                        data-id="${e.id}" title="Excluir">
                    <i class="bx bx-trash"></i>
                </button>
            </div>
        `;

        return `
            <tr data-id="${e.id}">
                <td class="text-center">${estrela}</td>
                <td>${e.logradouro ?? ""}</td>
                <td>${e.numero ?? ""}</td>
                <td>${e.complemento ?? ""}</td>
                <td>${e.cep ?? ""}</td>
                <td>${e.bairro ?? ""}</td>
                <td>${e.municipio ?? ""}</td>
                <td>${e.uf ?? ""}</td>
                <td class="text-center">${acoes}</td>
            </tr>
        `;
    }

    // ===== Carregar lista
    function carregar() {
        $tbody.html(`<tr><td colspan="9" class="text-muted">Carregando...</td></tr>`);

        $.get(urlListar)
         .done(function (resp) {
            // Segurança extra: se servidor devolveu HTML (ex: redirect), cai fora com erro visível
            if (typeof resp !== "object") {
                $tbody.html(`<tr><td colspan="9" class="text-danger">Resposta inválida do servidor.</td></tr>`);
                console.error("Listar PF → resposta não-JSON:", resp);
                swalMsg("Falha ao carregar endereços.", "error");
                return;
            }

            if (!resp.sucesso) {
                $tbody.html(`<tr><td colspan="9" class="text-danger">Falha ao carregar endereços.</td></tr>`);
                swalMsg("Falha ao carregar endereços.", "error");
                return;
            }

            const itens = resp.itens || [];
            if (!itens.length) {
                $tbody.html(`<tr><td colspan="9" class="text-muted">Nenhum endereço cadastrado para esta pessoa física.</td></tr>`);
                return;
            }

            let html = "";
            for (const e of itens) html += linhaEndereco(e);
            $tbody.html(html);

            // Fallback: se nenhum veio sinalizado como principal, consulta /Principal e pinta
            const temPrincipalNaLista = itens.some(x => isTrue(x.principal ?? x.Principal));
            if (!temPrincipalNaLista) {
                $.get(urlPrincipal).done(function (j) {
                    if (j?.sucesso && j.possuiPrincipal && j.endereco?.id) {
                        const id = j.endereco.id;
                        const $tr = $tbody.find(`tr[data-id='${id}']`);
                        if ($tr.length) {
                            $tr.find('td').eq(0).html(`
                                <button type="button" class="btn btn-link p-0" title="Endereço principal" disabled>
                                    <i class="bx bxs-star" style="font-size:1.25rem; color:#f5c518;"></i>
                                </button>
                            `);
                        }
                    }
                });
            }
         })
         .fail(function (xhr) {
            $tbody.html(`<tr><td colspan="9" class="text-danger">Erro ao consultar o servidor.</td></tr>`);
            console.error("Listar PF → erro", xhr);
            swalMsg(`Erro ao consultar o servidor. (${xhr.status})`, "error");
         });
    }

    // ===== Atualiza cartões/resumos externos (se existir)
    function atualizarPrincipalEmOutrosContextos() {
        $.get(urlPrincipal).done(function (resp) {
            if (!resp?.sucesso || !resp.possuiPrincipal) return;
            if (typeof window.atualizarCardEnderecoFornecedor === "function") {
                window.atualizarCardEnderecoFornecedor({
                    tipo: "PF",
                    id: @pessoaFisicaId,
                    endereco: resp.endereco
                });
            }
        });
    }

    // ===== Ações
    function definirPrincipal(enderecoId) {
        const url = urlDefinirPrincipalTpl.replace("__ID__", enderecoId);
        $.ajax({
            type: "POST",
            url: url,
            headers: { "RequestVerificationToken": token(), "X-Requested-With": "XMLHttpRequest" }
        })
        .done(function (resp) {
            if (resp?.sucesso) {
                swalMsg(resp.mensagem || "Endereço definido como principal!", "success");
                carregar();
                atualizarPrincipalEmOutrosContextos();
            } else {
                swalMsg(resp?.mensagem || "Não foi possível definir o principal.", "error");
            }
        })
        .fail(function (xhr) {
            const msg = xhr.responseJSON?.mensagem || `Falha ao definir o principal. (${xhr.status})`;
            swalMsg(msg, "error");
        });
    }

    function excluir(enderecoId) {
        swalConfirm({
            title: "Excluir endereço?",
            text:  "Esta ação não poderá ser desfeita.",
            confirmText: "Sim, excluir",
            cancelText: "Cancelar"
        }).then(res => {
            if (!res.isConfirmed) return;

            const url = urlExcluirTpl.replace("__ID__", enderecoId);
            $.ajax({
                type: "POST",
                url: url,
                headers: { "RequestVerificationToken": token(), "X-Requested-With": "XMLHttpRequest" }
            })
            .done(function (resp) {
                if (resp?.sucesso) {
                    swalMsg(resp.mensagem || "Endereço excluído.", "success");
                    carregar();
                    atualizarPrincipalEmOutrosContextos();
                } else {
                    swalMsg(resp?.mensagem || "Não foi possível excluir.", "error");
                }
            })
            .fail(function (xhr) {
                const msg = xhr.responseJSON?.mensagem || `Falha ao excluir. (${xhr.status})`;
                swalMsg(msg, "error");
            });
        });
    }

    // ===== Eventos
    $(document).on("click", ".btn-definir-principal", function () {
        definirPrincipal($(this).data("id"));
    });
    $(document).on("click", ".btn-excluir", function () {
        excluir($(this).data("id"));
    });

    // ===== Inicial
    carregar();
    atualizarPrincipalEmOutrosContextos();

    // Toasts vindos de TempData (Salvar/Atualizar)
    const flags = document.getElementById("pageFlags");
    if (flags) {
        const ok = flags.dataset.success;
        const info = flags.dataset.info;
        if (ok)   swalMsg(ok, "success");
        if (info) swalMsg(info, "info");
    }
})();
</script>
}