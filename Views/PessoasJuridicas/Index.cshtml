@model IEnumerable<Financeiro.Models.ViewModels.PessoaJuridicaListaViewModel>
@using System.Linq

@{
    ViewData["Title"] = "Pessoas Jurídicas";
    Layout = "_Layout";
}

@functions {
    // 00.000.000/0000-00
    string FormatCnpj(string? cnpj)
    {
        if (string.IsNullOrWhiteSpace(cnpj)) return "";
        var d = new string(cnpj.Where(char.IsDigit).ToArray());
        if (d.Length != 14) return cnpj ?? "";
        return $"{d[..2]}.{d.Substring(2,3)}.{d.Substring(5,3)}/{d.Substring(8,4)}-{d.Substring(12,2)}";
    }
}

<style>
    .pj-card{ border-left:4px solid var(--blue); transition:transform .06s ease, box-shadow .06s ease; }
    .pj-card:hover{ transform:translateY(-1px); box-shadow:0 .25rem .75rem rgba(16,36,68,.08); }

    .cnpj { font-variant-numeric: tabular-nums; letter-spacing:.2px; }

    .addr-grid .label{
        color:#6c757d; font-size:.82rem; text-transform:uppercase; letter-spacing:.02em;
    }
    .addr-grid .value{
        color:var(--dark); font-weight:600; font-size:1.05rem; line-height:1.3;
    }

    /* conta principal */
    .acc-item { border:1px solid #e9ecef; border-radius:.5rem; padding:.6rem .75rem; display:flex; align-items:start; gap:.5rem; }
    .acc-main { flex:1; }
    .acc-muted { color:#6c757d; font-size:.85rem; }
    .acc-actions .btn { padding:.25rem .5rem; }
    .acc-chip { font-size:.75rem; padding:.15rem .4rem; border-radius:999px; }
    .chip-principal { background:#fff3cd; color:#8a6d3b; border:1px solid #ffe8a1; }
    .secret { filter: blur(3px); transition: filter .15s ease; }
    .secret.show { filter: none; }
</style>

<div class="d-flex align-items-center justify-content-between mb-3">
    <h2 class="mb-0 fw-bold" style="color:var(--dark);">
        <i class="bx bx-buildings me-2"></i> Gerencie seus fornecedores PJ
    </h2>
    <a asp-action="Novo" class="btn btn-primary">
        <i class='bx bx-plus-circle'></i> Nova Pessoa Jurídica
    </a>
</div>

<!-- Antiforgery token para AJAX -->
<form id="af-token-form" class="d-none">@Html.AntiForgeryToken()</form>

<div class="row g-3 row-cols-1 row-cols-md-2 row-cols-xl-3">
@foreach (var item in Model)
{
    var pj = item.Pessoa;
    <div class="col">
        <div class="card h-100 shadow-sm border-0 pj-card" data-id="@pj.Id">
            <div class="card-body d-flex flex-column">
                <div class="d-flex justify-content-between align-items-start mb-2">
                    <div>
                        <div class="fw-semibold" style="color:var(--dark);">@pj.RazaoSocial</div>
                        <div class="small text-muted">@pj.NomeFantasia</div>
                    </div>
                    <span class="badge bg-@(pj.SituacaoAtiva ? "primary" : "secondary")">
                        @(pj.SituacaoAtiva ? "Ativa" : "Inativa")
                    </span>
                </div>

                <div class="small text-muted mb-2">
                    <i class='bx bx-id-card me-1'></i>
                    <span class="cnpj">@FormatCnpj(pj.NumeroInscricao)</span>
                </div>

                <!-- Endereço principal -->
                <div class="mt-2">
                    <div class="small text-muted mb-1">
                        <i class="bx bx-map me-1"></i> Endereço principal
                    </div>
                    <div id="addr-@pj.Id" class="text-muted">
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                        Carregando…
                    </div>
                </div>

                <!-- Conta bancária (somente principal) -->
                <div class="mt-3">
                    <div class="small text-muted mb-1">
                        <i class="bx bx-bank me-1"></i> Conta bancária (principal)
                    </div>

                    <div id="acc-@pj.Id" class="small">
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                        Carregando…
                    </div>

                    <div class="mt-2 d-flex gap-2">
                        <a class="btn btn-sm btn-outline-success"
                           asp-controller="ContasBancarias"
                           asp-action="Novo"
                           asp-route-pessoaId="@pj.Id">
                            <i class='bx bx-plus-circle'></i> Nova conta
                        </a>

                        <a class="btn btn-sm btn-outline-secondary"
                           asp-controller="ContasBancarias"
                           asp-action="IndexPJ"
                           asp-route-pessoaId="@pj.Id">
                            <i class='bx bx-list-ul'></i> Ver todas
                        </a>
                    </div>
                </div>

                <div class="mt-auto"></div>
            </div>

            <div class="card-footer bg-transparent border-0 pt-0">
                <div class="d-flex flex-wrap gap-2">
                    <a class="btn btn-sm btn-outline-secondary"
                       asp-controller="Enderecos"
                       asp-action="GerenciarPessoaJuridica"
                       asp-route-pessoaJuridicaId="@pj.Id" title="Endereços">
                        <i class='bx bx-map'></i> Endereços
                    </a>

                    <a class="btn btn-sm btn-outline-primary"
                       asp-action="Editar" asp-route-id="@pj.Id" title="Editar">
                        <i class='bx bx-pencil'></i> Editar
                    </a>
                </div>
            </div>
        </div>
    </div>
}
</div>

@section Scripts {
<script>
(function () {
    // base do app (suporta app em subpasta; termina com '/')
    const base = '@Url.Content("~")'.replace(/\/?$/, '/');

    // ====== antiforgery ======
    function getRequestVerificationToken() {
        const form = document.getElementById('af-token-form');
        const inp = form ? form.querySelector('input[name="__RequestVerificationToken"]') : null;
        return inp ? inp.value : null;
    }

    // helper CEP
    function formatCep(cep){
        if(!cep) return '';
        const d = (''+cep).replace(/\D/g,'');
        return d.replace(/^(\d{5})(\d{3})$/,'$1-$2');
    }

    // ====== Endereço principal PJ ======
    document.querySelectorAll(".pj-card").forEach(function(card){
        const id   = card.getAttribute("data-id");
        const slot = document.getElementById(`addr-${id}`);
        const url  = `${base}Enderecos/PessoaJuridica/${id}/Principal`;

        fetch(url)
          .then(r => {
              if (!r.ok) throw new Error(`HTTP ${r.status}`);
              return r.json();
          })
          .then(j => {
              if(!j || j.sucesso !== true){
                  slot.classList.add("text-danger");
                  slot.textContent = "Falha ao carregar";
                  return;
              }
              if(!j.possuiPrincipal){
                  slot.innerHTML = `<span class="badge bg-secondary">
                      <i class="bx bx-minus me-1"></i> Sem principal
                  </span>`;
                  return;
              }

              // suporta PascalCase ou camelCase no objeto 'endereco'
              const e = j.endereco || {};
              const _ = (a,b) => a ?? b ?? '';

              slot.innerHTML = `
                <div class="addr-grid">
                    <div class="row gx-2 gy-1">
                        <div class="col-12">
                            <div class="label">Logradouro</div>
                            <div class="value">${_(e.Logradouro, e.logradouro)}</div>
                        </div>
                        <div class="col-4 col-sm-3">
                            <div class="label">Número</div>
                            <div class="value">${_(e.Numero, e.numero)}</div>
                        </div>
                        <div class="col-8 col-sm-9">
                            <div class="label">Complemento</div>
                            <div class="value">${_(e.Complemento, e.complemento)}</div>
                        </div>
                        <div class="col-4 col-sm-3">
                            <div class="label">CEP</div>
                            <div class="value">${formatCep(_(e.Cep, e.cep))}</div>
                        </div>
                        <div class="col-8 col-sm-3">
                            <div class="label">Bairro</div>
                            <div class="value">${_(e.Bairro, e.bairro)}</div>
                        </div>
                        <div class="col-8 col-sm-4">
                            <div class="label">Município</div>
                            <div class="value">${_(e.Municipio, e.municipio)}</div>
                        </div>
                        <div class="col-4 col-sm-2">
                            <div class="label">UF</div>
                            <div class="value">${_(e.Uf, e.uf)}</div>
                        </div>
                    </div>
                </div>`;
          })
          .catch(() => { slot.classList.add("text-danger"); slot.textContent = "Erro"; });
    });

    // ====== Conta bancária principal (UI) ======
    function mask(val) {
        if (!val) return '';
        const t = String(val);
        if (t.length <= 2) return '*'.repeat(t.length);
        return t[0] + '*'.repeat(t.length - 2) + t[t.length - 1];
    }

    function renderPrincipal(slot, acc, pjId){
        if (!acc) {
            slot.innerHTML = `<span class='badge bg-secondary'><i class='bx bx-minus me-1'></i> Sem principal</span>`;
            return;
        }

        const banco     = acc.banco ?? acc.Banco ?? '';
        const agencia   = acc.agencia ?? acc.Agencia ?? '';
        const conta     = acc.conta ?? acc.Conta ?? '';
        const pix       = acc.chavePix ?? acc.ChavePix ?? '';
        const vinculoId = acc.vinculoId ?? acc.VinculoId;

        slot.innerHTML = `
          <div class="acc-item" data-vinculo="${vinculoId}">
            <div class="acc-main">
              <div><strong>${banco || '(Sem banco)'}</strong>
                <span class="acc-chip chip-principal ms-2"><i class='bx bxs-star me-1'></i> Principal</span>
              </div>
              <div class="acc-muted">
                Agência: <span class="secret" data-secret>${mask(agencia)}</span> ·
                Conta: <span class="secret" data-secret>${mask(conta)}</span>
                ${pix ? ` · Pix: <span class="secret" data-secret>${mask(pix)}</span>` : ``}
              </div>
            </div>
            <div class="acc-actions d-flex gap-1">
              <button class="btn btn-light border toggle-visibility" title="Mostrar/ocultar">
                <i class='bx bx-low-vision'></i>
              </button>
              <a class="btn btn-light border" href="${base}ContasBancarias/Editar?vinculoId=${vinculoId}" title="Editar">
                <i class='bx bx-pencil'></i>
              </a>
              <a class="btn btn-light border" href="${base}ContasBancarias/IndexPJ?pessoaId=${pjId}" title="Ver todas">
                <i class='bx bx-list-ul'></i>
              </a>
            </div>
          </div>`;

        slot.querySelector('.toggle-visibility')?.addEventListener('click', function(e){
            e.preventDefault();
            slot.querySelectorAll('[data-secret]').forEach(s => s.classList.toggle('show'));
        });
    }

    async function loadPrincipalAccountFor(pjId) {
        const slot = document.getElementById(`acc-${pjId}`);
        if (!slot) return;
        slot.innerHTML = `<span class="spinner-border spinner-border-sm me-1" role="status"></span> Carregando…`;
        try {
            const url = `${base}ContasBancarias/PessoaJuridica/${pjId}/Principal`;
            const r = await fetch(url, { headers: { "X-Requested-With": "XMLHttpRequest" } });
            if (!r.ok) throw new Error(`HTTP ${r.status}`);
            const j = await r.json();
            if (!j?.sucesso) { slot.classList.add("text-danger"); slot.textContent = "Falha ao carregar"; return; }
            renderPrincipal(slot, j.possuiPrincipal ? j.conta : null, pjId);
        } catch {
            slot.classList.add("text-danger"); slot.textContent = "Erro";
        }
    }

    // carregar endereço + conta principal por cartão
    document.querySelectorAll(".pj-card").forEach(function(card){
        const id = card.getAttribute("data-id");

        // já carregamos o endereço acima; agora a conta principal
        loadPrincipalAccountFor(id);
    });
})();
</script>
}