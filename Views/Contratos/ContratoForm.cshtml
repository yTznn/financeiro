@model Financeiro.Models.ViewModels.ContratoViewModel
@using Financeiro.Models
@using System.Linq

@{
    ViewData["Title"] = Model.Id == 0 ? "Novo Contrato" : "Editar Contrato";
    var naturezas = ViewBag.Naturezas as IEnumerable<Natureza> ?? Enumerable.Empty<Natureza>();
    var fornecedorAtual = ViewBag.FornecedorAtual as VwFornecedor;
    var selecionadas = Model.NaturezasIds ?? new List<int>();
}

<div id="pageFlags"
     data-success="@(TempData["Sucesso"] ?? TempData["MensagemSucesso"])"
     data-error="@(TempData["Erro"] ?? TempData["MensagemErro"])"></div>

<h3 class="fw-bold mb-4"><i class="bi bi-file-earmark-text-fill me-2"></i>@ViewData["Title"]</h3>
<hr />

<form id="form-contrato" novalidate
      asp-action="@(Model.Id == 0 ? "Salvar" : "Atualizar")"
      method="post"
      class="row g-3">

    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />
    <input type="hidden" name="justificativa" id="justificativa-hidden" />

    @* ... (outros campos do formulário - sem alterações) ... *@
    
    <div class="col-12">
        <label asp-for="FornecedorIdCompleto" class="form-label fw-semibold"></label>
        <select asp-for="FornecedorIdCompleto" id="fornecedor-select" class="form-select w-100">
            @if (fornecedorAtual != null)
            {
                <option value="@Model.FornecedorIdCompleto" selected>
                    @fornecedorAtual.Nome (@fornecedorAtual.Documento)
                </option>
            }
        </select>
        <span asp-validation-for="FornecedorIdCompleto" class="text-danger"></span>
    </div>

    <div class="col-12 col-md-6">
        <label asp-for="AnoContrato" class="form-label fw-semibold"></label>
        <input asp-for="AnoContrato" type="number" class="form-control" />
        <span asp-validation-for="AnoContrato" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-6">
        <label asp-for="NumeroContrato" class="form-label fw-semibold"></label>
        <input asp-for="NumeroContrato" type="number" class="form-control" />
        <span asp-validation-for="NumeroContrato" class="text-danger"></span>
    </div>

    <div class="col-12">
        <label asp-for="ObjetoContrato" class="form-label fw-semibold"></label>
        <textarea asp-for="ObjetoContrato" class="form-control" rows="3"></textarea>
        <span asp-validation-for="ObjetoContrato" class="text-danger"></span>
    </div>
    <div class="row"></div>
    <div class="col-12 mb-3">
            <label asp-for="OrcamentoId" class="form-label"></label>
            <select asp-for="OrcamentoId" 
                    class="form-select" 
                    asp-items="@(new SelectList(ViewBag.Orcamentos, "Id", "Nome", Model.OrcamentoId))">
                <option value="">Nenhum (não vincular)</option>
            </select>
        </div>
    </div>
    <div class="col-12 col-md-4">
        <label asp-for="DataInicio" class="form-label fw-semibold"></label>
        <input asp-for="DataInicio" type="date" class="form-control" />
        <span asp-validation-for="DataInicio" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-4">
        <label asp-for="DataFim" class="form-label fw-semibold"></label>
        <input asp-for="DataFim" type="date" class="form-control" />
        <span asp-validation-for="DataFim" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-4">
        <label asp-for="DataAssinatura" class="form-label fw-semibold"></label>
        <input asp-for="DataAssinatura" type="date" class="form-control" />
    </div>

    <div class="col-12 col-md-4">
        <label asp-for="ValorMensal" class="form-label fw-semibold"></label>
        <div class="input-group">
            <span class="input-group-text">R$</span>
            <input asp-for="ValorMensal" type="text" class="form-control money"/>
        </div>
        <span asp-validation-for="ValorMensal" class="text-danger"></span>
    </div>

    <div class="col-12 col-md-4">
        <label asp-for="ValorContrato" class="form-label fw-semibold"></label>
        <div class="input-group">
            <span class="input-group-text">R$</span>
            <input asp-for="ValorContrato" type="text" class="form-control money"/>
        </div>
        <span asp-validation-for="ValorContrato" class="text-danger"></span>
    </div>
    
    @* --- CAMPO DE NATUREZAS COM O NOVO ALERTA --- *@
    <div class="col-12">
        <label asp-for="NaturezasIds" class="form-label fw-semibold"></label>
        <select asp-for="NaturezasIds" id="naturezas-select" multiple class="form-select w-100">
            @foreach (var n in naturezas)
            {
                var isSel = selecionadas.Contains(n.Id);
                <option value="@n.Id" selected="@(isSel ? "selected" : null)">@n.Nome</option>
            }
        </select>
        <span asp-validation-for="NaturezasIds" class="text-danger"></span>

        <div id="alerta-multiplas-naturezas" class="alert alert-warning mt-2 d-none" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>Atenção:</strong> Ao selecionar múltiplas naturezas, será necessário especificar em qual delas cada lançamento de consumo mensal será alocado.
        </div>
    </div>

    <div class="col-12">
        <label asp-for="Observacao" class="form-label fw-semibold"></label>
        <textarea asp-for="Observacao" class="form-control" rows="3"></textarea>
    </div>

    <div class="col-12">
        <div class="form-check">
            <input asp-for="Ativo" class="form-check-input" type="checkbox" />
            <label asp-for="Ativo" class="form-check-label fw-semibold"></label>
        </div>
    </div>

    <div class="col-12 mt-4">
        <button type="submit" class="btn btn-primary">
            <i class="bi bi-check-circle me-1"></i> Salvar Alterações
        </button>

        @if (Model.Id > 0)
        {
            <a asp-controller="AditivosContrato" asp-action="Novo" asp-route-contratoId="@Model.Id" class="btn btn-info">
                <i class="bi bi-plus-circle me-1"></i> Aditivar Contrato
            </a>
        }

        <a asp-action="Index" class="btn btn-secondary">
            <i class="bi bi-x-circle me-1"></i> Cancelar
        </a>
    </div>
</form>

@if (Model.Id > 0)
{
    <hr class="my-4" />
    <h4 class="fw-bold">Histórico de Aditivos</h4>
    <div id="historico-container"><p>Carregando histórico...</p></div>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // ... (Funções globais e configuração do JQuery Validate - sem alterações) ...
        function parseCurrency(value) {
            if (value === null || value === undefined) return 0;
            const s = String(value).trim();
            if (!s) return 0;
            const normalized = s.replace(/\./g, '').replace(',', '.');
            const n = parseFloat(normalized);
            return isNaN(n) ? 0 : n;
        }
        function formatCurrency(value) {
            let v = Number(value);
            if (isNaN(v)) v = 0;
            return v.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }
        if ($.validator) {
            $.validator.setDefaults({
                onkeyup: false,
                onfocusout: function (element) { $(element).valid(); }
            });
            $.validator.methods.number = function (value, element) {
                return this.optional(element) || !isNaN(parseCurrency(value));
            };
            $.validator.methods.min = function (value, element, param) {
                const v = parseCurrency(value);
                const p = typeof param === "string" ? parseFloat(param.replace(",", ".")) : param;
                return this.optional(element) || (!isNaN(v) && v >= p);
            };
            $.validator.methods.max = function (value, element, param) {
                const v = parseCurrency(value);
                const p = typeof param === "string" ? parseFloat(param.replace(",", ".")) : param;
                return this.optional(element) || (!isNaN(v) && v <= p);
            };
            $.validator.methods.range = function (value, element, params) {
                const v = parseCurrency(value);
                const min = typeof params[0] === "string" ? parseFloat(params[0].replace(",", ".")) : params[0];
                const max = typeof params[1] === "string" ? parseFloat(params[1].replace(",", ".")) : params[1];
                return this.optional(element) || (!isNaN(v) && v >= min && v <= max);
            };
        }

        $(document).ready(function () {
            const isEdit = @((Model.Id > 0).ToString().ToLower());
            const form = $('#form-contrato');
            let originalFormData = form.serialize();

            // ... (Cálculo bidirecional, alertas, etc. - sem alterações) ...
            const dataInicioInput  = $('#DataInicio');
            const dataFimInput     = $('#DataFim');
            const valorMensalInput = $('#ValorMensal');
            const valorTotalInput  = $('#ValorContrato');
            let lastChanged = 'mensal'; 
            function calcularValores() {
                const dataInicioStr = dataInicioInput.val();
                const dataFimStr    = dataFimInput.val();
                if (!dataInicioStr || !dataFimStr) return;
                const dataInicio = new Date(dataInicioStr + 'T00:00:00');
                const dataFim    = new Date(dataFimStr + 'T00:00:00');
                if (dataFim < dataInicio) return;
                const meses = (dataFim.getFullYear() - dataInicio.getFullYear()) * 12 + (dataFim.getMonth() - dataInicio.getMonth()) + 1;
                const numeroDeMeses = meses > 0 ? meses : 1;
                if (lastChanged === 'mensal') {
                    const valorMensal = parseCurrency(valorMensalInput.val());
                    const valorTotalCalculado = valorMensal * numeroDeMeses;
                    valorTotalInput.val(formatCurrency(valorTotalCalculado));
                } else if (lastChanged === 'total') {
                    const valorTotal = parseCurrency(valorTotalInput.val());
                    const valorMensalCalculado = valorTotal / numeroDeMeses;
                    valorMensalInput.val(formatCurrency(valorMensalCalculado));
                }
            }
            valorMensalInput.on('input', function () { lastChanged = 'mensal'; calcularValores(); });
            valorTotalInput .on('input', function () { lastChanged = 'total';  calcularValores(); });
            dataInicioInput .on('change', calcularValores);
            dataFimInput    .on('change', calcularValores);
            valorMensalInput.val(formatCurrency(parseCurrency(valorMensalInput.val())));
            valorTotalInput .val(formatCurrency(parseCurrency(valorTotalInput.val())));
            const flags = document.getElementById("pageFlags");
            if (flags) {
                const ok  = (flags.dataset.success || "").trim();
                const err = (flags.dataset.error   || "").trim();
                if (ok) Swal.fire({ icon: "success", text: ok });
                if (err) Swal.fire({ icon: "error", title: "Ocorreram erros de validação", html: err });
            }

            // --- SELECT2 ---
            $('#fornecedor-select').select2({
                theme: 'bootstrap-5',
                width: '100%',
                minimumInputLength: 1,
                ajax: {
                    url: '@Url.Action("BuscarFornecedores","Contratos")',
                    dataType: 'json',
                    delay: 250,
                    data: p => ({ term: p.term, page: p.page || 1 }),
                    processResults: (d, p) => ({ results: d.results, pagination: { more: d.pagination.more } })
                }
            });
            $('#naturezas-select').select2({ theme: 'bootstrap-5', width: '100%' });

            // --- NOVA LÓGICA PARA EXIBIR/OCULTAR O ALERTA ---
            const naturezasSelect = $('#naturezas-select');
            const alertaNaturezas = $('#alerta-multiplas-naturezas');

            function toggleAlertaNaturezas() {
                const qtdSelecionadas = naturezasSelect.val()?.length || 0;
                if (qtdSelecionadas > 1) {
                    alertaNaturezas.removeClass('d-none');
                } else {
                    alertaNaturezas.addClass('d-none');
                }
            }

            // Verifica no carregamento da página
            toggleAlertaNaturezas();
            // E verifica toda vez que o select mudar
            naturezasSelect.on('change', function() {
                toggleAlertaNaturezas();
                // Mantém a revalidação dos campos de valor
                $('#ValorMensal, #ValorContrato').each(function () { $(this).valid(); });
            });

            // ... (Sugerir número e Histórico - sem alterações) ...
            $('#AnoContrato').on('change', function () {
                var ano = $(this).val();
                if (ano && !isEdit) {
                    $.get('@Url.Action("SugerirNumero","Contratos")', { ano: ano }, function (d) {
                        $('#NumeroContrato').val(d.proximoNumero);
                    });
                }
            }).trigger('change');
            if (isEdit) {
                $('#historico-container').load('@Url.Action("Historico","Contratos", new { id = Model.Id })');
            }

            // --- LÓGICA DE SUBMISSÃO E JUSTIFICATIVA (COM MENSAGEM ATUALIZADA) ---
            form.on('submit', async function (e) {
                const mensalInput = $('#ValorMensal');
                const totalInput = $('#ValorContrato');
                const mensalDec = parseCurrency(mensalInput.val()).toFixed(2).replace('.', ',');
                const totalDec  = parseCurrency(totalInput.val()).toFixed(2).replace('.', ',');
                mensalInput.val(mensalDec);
                totalInput.val(totalDec);

                const currentFormData = form.serialize();
                let precisaJustificativa = false;
                let motivo = "";

                if (isEdit) {
                    if (currentFormData !== originalFormData) {
                        precisaJustificativa = true;
                        motivo = "Informe a justificativa para a alteração do contrato:";
                    } else {
                        e.preventDefault();
                        Swal.fire({ icon: 'info', text: 'Nenhuma alteração foi feita.' });
                        mensalInput.val(formatCurrency(parseCurrency(mensalInput.val())));
                        totalInput.val(formatCurrency(parseCurrency(totalInput.val())));
                        return;
                    }
                } else {
                    const qtdNaturezas = ($('#naturezas-select').val() || []).length;
                    if (qtdNaturezas > 1) {
                        precisaJustificativa = true;
                        // MENSAGEM ATUALIZADA
                        motivo = "Você selecionou mais de uma natureza. Por favor, informe o motivo para vincular este contrato a múltiplas naturezas.";
                    }
                }

                if (precisaJustificativa) {
                    e.preventDefault(); 
                    const { value: justificativa, isConfirmed } = await Swal.fire({
                        title: "Justificativa Necessária",
                        text: motivo,
                        input: "textarea",
                        inputAttributes: { maxlength: 1000 },
                        inputValidator: (v) => !v ? "A justificativa é obrigatória." : undefined,
                        showCancelButton: true,
                        confirmButtonText: "Confirmar e Salvar",
                        cancelButtonText: "Cancelar"
                    });

                    if (isConfirmed && justificativa) {
                        $('#justificativa-hidden').val(justificativa);
                        $(this).off('submit').submit();
                    } else {
                        mensalInput.val(formatCurrency(parseCurrency(mensalInput.val())));
                        totalInput.val(formatCurrency(parseCurrency(totalInput.val())));
                    }
                }
            });
        });
    </script>
}

<style>
    .form-control-plaintext.fs-5.fw-bold { padding-left: 0.5rem; }
    @@media (max-width: 767.98px) {
        .col-12 > .btn {
            display: block; width: 100%; float: none !important;
            margin-bottom: 8px; margin-left: 0 !important; margin-right: 0 !important;
        }
        .col-12 > .btn-primary { order: 1; }
        .col-12 > .btn-info    { order: 2; }
        .col-12 > .btn-secondary { order: 3; }
    }
</style>