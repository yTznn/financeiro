@model Financeiro.Models.ViewModels.ContratoViewModel
@using Financeiro.Models

@{
    ViewData["Title"] = Model.Id == 0 ? "Novo Contrato" : "Editar Contrato";
    var naturezas = ViewBag.Naturezas as IEnumerable<Natureza> ?? Enumerable.Empty<Natureza>();
    var fornecedorAtual = ViewBag.FornecedorAtual as VwFornecedor;
}

<div id="pageFlags"
     data-success="@TempData["Sucesso"]"
     data-error="@TempData["Erro"]"></div>

<h3 class="fw-bold mb-4"><i class="bi bi-file-earmark-text-fill me-2"></i>@ViewData["Title"]</h3>
<hr />

<form id="form-contrato"
      asp-action="@(Model.Id == 0 ? "Salvar" : "Atualizar")"
      method="post"
      class="row g-3">

    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />
    <input type="hidden" name="justificativa" id="justificativa-hidden" />

    <div class="col-12">
        <label asp-for="FornecedorIdCompleto" class="form-label fw-semibold"></label>
        <select asp-for="FornecedorIdCompleto" id="fornecedor-select" class="form-select w-100">
            @if (fornecedorAtual != null)
            {
                <option value="@Model.FornecedorIdCompleto" selected>
                    @fornecedorAtual.Nome (@fornecedorAtual.Documento)
                </option>
            }
        </select>
        <span asp-validation-for="FornecedorIdCompleto" class="text-danger"></span>
    </div>

    <div class="col-12 col-md-6">
        <label asp-for="AnoContrato" class="form-label fw-semibold"></label>
        <input asp-for="AnoContrato" type="number" class="form-control" />
        <span asp-validation-for="AnoContrato" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-6">
        <label asp-for="NumeroContrato" class="form-label fw-semibold"></label>
        <input asp-for="NumeroContrato" type="number" class="form-control" />
        <span asp-validation-for="NumeroContrato" class="text-danger"></span>
    </div>

    <div class="col-12">
        <label asp-for="ObjetoContrato" class="form-label fw-semibold"></label>
        <textarea asp-for="ObjetoContrato" class="form-control" rows="3"></textarea>
        <span asp-validation-for="ObjetoContrato" class="text-danger"></span>
    </div>

    <div class="col-12 col-md-4">
        <label asp-for="DataInicio" class="form-label fw-semibold"></label>
        <input asp-for="DataInicio" type="date" class="form-control" />
        <span asp-validation-for="DataInicio" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-4">
        <label asp-for="DataFim" class="form-label fw-semibold"></label>
        <input asp-for="DataFim" type="date" class="form-control" />
        <span asp-validation-for="DataFim" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-4">
        <label asp-for="DataAssinatura" class="form-label fw-semibold"></label>
        <input asp-for="DataAssinatura" type="date" class="form-control" />
    </div>

    <div class="col-12 col-md-4">
        <label asp-for="ValorMensal" class="form-label fw-semibold"></label>
        <div class="input-group">
            <span class="input-group-text">R$</span>
            <input asp-for="ValorMensal" type="text" class="form-control money"/>
        </div>
        <span asp-validation-for="ValorMensal" class="text-danger"></span>
    </div>

    <div class="col-12 col-md-4">
        <label asp-for="ValorContrato" class="form-label fw-semibold"></label>
        <div class="input-group">
            <span class="input-group-text">R$</span>
            <input asp-for="ValorContrato" type="text" class="form-control money"/>
        </div>
        <span asp-validation-for="ValorContrato" class="text-danger"></span>
    </div>

    <div class="col-12">
        <label asp-for="NaturezasIds" class="form-label fw-semibold"></label>
        <select asp-for="NaturezasIds" id="naturezas-select" multiple class="form-select w-100">
            @foreach (var n in naturezas)
            {
                <option value="@n.Id">@n.Nome</option>
            }
        </select>
        <span asp-validation-for="NaturezasIds" class="text-danger"></span>
    </div>

    <div class="col-12">
        <label asp-for="Observacao" class="form-label fw-semibold"></label>
        <textarea asp-for="Observacao" class="form-control" rows="3"></textarea>
    </div>

    <div class="col-12">
        <div class="form-check">
            <input asp-for="Ativo" class="form-check-input" type="checkbox" />
            <label asp-for="Ativo" class="form-check-label fw-semibold"></label>
        </div>
    </div>

    <div class="col-12 mt-4">
        <button type="submit" class="btn btn-primary">
            <i class="bi bi-check-circle me-1"></i> Salvar Alterações
        </button>

        @if (Model.Id > 0)
        {
            <a asp-controller="AditivosContrato" asp-action="Novo" asp-route-contratoId="@Model.Id" class="btn btn-info">
                <i class="bi bi-plus-circle me-1"></i> Aditivar Contrato
            </a>
        }

        <a asp-action="Index" class="btn btn-secondary">
            <i class="bi bi-x-circle me-1"></i> Cancelar
        </a>
    </div>
</form>

@if (Model.Id > 0)
{
    <hr class="my-4" />
    <h4 class="fw-bold">Histórico de Aditivos</h4>
    <div id="historico-container"><p>Carregando histórico...</p></div>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // AQUI A CORREÇÃO: Configura o validador para um comportamento mais amigável
        $.validator.setDefaults({
            onkeyup: false,
            onfocusout: function(element) {
                $(element).valid();
            }
        });

        // AQUI A CORREÇÃO PARA O PROBLEMA DE VALIDAÇÃO DE NÚMEROS COM VÍRGULA
        $.validator.methods.number = function (value, element) {
            const parsedValue = parseCurrency(value);
            return this.optional(element) || !isNaN(parsedValue);
        };

        $(document).ready(function () {
            // --- INÍCIO DO SCRIPT DE CÁLCULO BIDIRECIONAL ---
            const dataInicioInput = $('#DataInicio');
            const dataFimInput = $('#DataFim');
            const valorMensalInput = $('#ValorMensal');
            const valorTotalInput = $('#ValorContrato');
            
            let lastChanged = null; 

            function parseCurrency(value) {
                if (!value) return 0;
                return parseFloat(String(value).replace(/\./g, '').replace(',', '.'));
            }

            function formatCurrency(value) {
                if (isNaN(value)) value = 0;
                return value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            }
            
            function calcularValores() {
                const dataInicioStr = dataInicioInput.val();
                const dataFimStr = dataFimInput.val();
                
                if (!dataInicioStr || !dataFimStr) return;
                
                const dataInicio = new Date(dataInicioStr + 'T00:00:00');
                const dataFim = new Date(dataFimStr + 'T00:00:00');
                
                if (dataFim < dataInicio) return; 

                const meses = (dataFim.getFullYear() - dataInicio.getFullYear()) * 12 + (dataFim.getMonth() - dataInicio.getMonth()) + 1;
                const numeroDeMeses = meses > 0 ? meses : 1;

                if (lastChanged === 'mensal') {
                    const valorMensal = parseCurrency(valorMensalInput.val());
                    const valorTotalCalculado = valorMensal * numeroDeMeses;
                    valorTotalInput.val(formatCurrency(valorTotalCalculado));
                } else if (lastChanged === 'total') {
                    const valorTotal = parseCurrency(valorTotalInput.val());
                    const valorMensalCalculado = valorTotal / numeroDeMeses;
                    valorMensalInput.val(formatCurrency(valorMensalCalculado));
                }
            }

            valorMensalInput.on('input', function() {
                lastChanged = 'mensal';
                calcularValores();
            });

            valorTotalInput.on('input', function() {
                lastChanged = 'total';
                calcularValores();
            });
            
            dataInicioInput.on('change', function() {
                 lastChanged = 'mensal'; 
                 calcularValores();
            });
            dataFimInput.on('change', function() {
                 lastChanged = 'mensal';
                 calcularValores();
            });
            
            valorMensalInput.val(formatCurrency(parseCurrency(valorMensalInput.val())));
            valorTotalInput.val(formatCurrency(parseCurrency(valorTotalInput.val())));
            
            // --- FIM DO SCRIPT DE CÁLCULO ---


            // --- SCRIPT DE ALERTAS (SweetAlert) ---
            const flags = document.getElementById("pageFlags");
            if (flags) {
                const ok = (flags.dataset.success || "").trim();
                const err = (flags.dataset.error || "").trim();
                if (ok) Swal.fire({ icon: "success", text: ok });

                if (err) Swal.fire({
                    icon: "error",
                    title: "Ocorreram erros de validação",
                    html: err
                });
            }
            
            // --- LÓGICA EXISTENTE DA PÁGINA ---
            $('#fornecedor-select').select2({ theme: 'bootstrap-5', width: '100%', minimumInputLength: 1, ajax: { url: '@Url.Action("BuscarFornecedores","Contratos")', dataType: 'json', delay: 250, data: p => ({ term: p.term, page: p.page || 1 }), processResults: (d, p) => ({ results: d.results, pagination: { more: d.pagination.more } }) } });

            $('#naturezas-select').select2({ theme: 'bootstrap-5', width: '100%' });

            $('#AnoContrato').on('change', function () {
                var ano = $(this).val();
                if (ano && @Model.Id == 0) {
                    $.get('@Url.Action("SugerirNumero","Contratos")', { ano: ano }, function (d) { $('#NumeroContrato').val(d.proximoNumero); });
                }
            }).trigger('change');

            @if (Model.Id > 0)
            {
                <text>$('#historico-container').load('@Url.Action("Historico","Contratos", new { id = Model.Id })');</text>
            }
            
            $('#form-contrato').on('submit', async function (e) {
                valorMensalInput.val(parseCurrency(valorMensalInput.val()).toFixed(2).replace('.', ','));
                valorTotalInput.val(parseCurrency(valorTotalInput.val()).toFixed(2).replace('.', ','));

                const ids = $('#naturezas-select').val() || [];
                if (ids.length > 1) {
                    e.preventDefault();
                    const result = await Swal.fire({ title: "Justificativa necessária", text: "Foi selecionado mais de uma Natureza. Informe a justificativa:", input: "textarea", showCancelButton: true });
                    if (!result.isConfirmed || !result.value) { 
                        valorMensalInput.val(formatCurrency(parseCurrency(valorMensalInput.val())));
                        valorTotalInput.val(formatCurrency(parseCurrency(valorTotalInput.val())));
                        return false; 
                    }
                    $('#justificativa-hidden').val(result.value);
                    $(this).off('submit').submit();
                }
            });
        });
    </script>
}

@{
<text>
<style>
    .form-control-plaintext.fs-5.fw-bold {
        padding-left: 0.5rem;
    }
    
    @@media (max-width: 767.98px) {
        .col-12 > .btn {
            display: block;
            width: 100%;
            float: none !important;
            margin-bottom: 8px;
            margin-left: 0 !important;
            margin-right: 0 !important;
        }

        .col-12 > .btn-primary { order: 1; }
        .col-12 > .btn-info { order: 2; }
        .col-12 > .btn-secondary { order: 3; }
    }
</style>
</text>
}