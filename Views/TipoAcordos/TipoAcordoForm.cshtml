@model Financeiro.Models.ViewModels.TipoAcordoViewModel

@{
    ViewBag.Title = Model.Id == 0 ? "Novo Repasse (Tipo de Acordo)" : "Editar Repasse (Tipo de Acordo)";
    Layout = "_Layout";
    var action = Model.Id == 0 ? "Salvar" : "Atualizar";
}

<h2 class="mb-4">@ViewBag.Title</h2>

<!-- ====== CARD RESUMO DO REPASSE ====== -->
<div class="card shadow-sm border-0 mb-4">
    <div class="card-body p-3 p-md-4">
        <div class="d-flex flex-wrap align-items-center gap-3">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center gap-2 mb-1">
                    <span class="badge bg-info-subtle text-info fw-semibold">Repasse</span>
                    @if (Model.Id != 0)
                    {
                        <span class="badge @(Model.Ativo ? "bg-success" : "bg-secondary")">
                            @(Model.Ativo ? "Ativo" : "Inativo")
                        </span>
                    }
                </div>
                <div class="fs-5 fw-semibold mb-1">
                    <span id="resumoEntidade">Entidade: (selecione)</span>
                </div>
                <div class="text-muted">
                    Período: <span id="resumoPeriodo">
                        @(Model.DataInicio != default && Model.DataFim != default
                            ? $"{Model.DataInicio:dd/MM/yyyy} → {Model.DataFim:dd/MM/yyyy}"
                            : "definir datas")
                    </span>
                </div>
            </div>
            <div class="text-end ms-auto">
                <div class="text-muted small">Valor acordado</div>
                <div class="display-6 fw-bold" id="resumoValor">
                    @(Model.Valor > 0 ? Model.Valor.ToString("C") : "R$ 0,00")
                </div>
            </div>
        </div>
    </div>
</div>

@if (Model.Id != 0)
{
    <!-- Botões utilitários -->
    <div class="mb-3 d-flex flex-wrap gap-2">
        <a asp-controller="Aditivos"
           asp-action="Novo"
           asp-route-acordoId="@Model.Id"
           class="btn btn-outline-primary">
            + Registrar Aditivo
        </a>

        <button type="button"
                class="btn btn-outline-primary"
                data-bs-toggle="modal"
                data-bs-target="#modalHistorico">
            Histórico de Aditivos
        </button>
    </div>
}

<div asp-validation-summary="All" class="text-danger mb-2"></div>

<form id="formAcordo" asp-action="@action" method="post" class="row g-3" novalidate>
    @Html.AntiForgeryToken()

    <input type="hidden" asp-for="Id" />
    @if (Model.Id != 0)
    {
        <input type="hidden" name="id" value="@Model.Id" />
    }

    <!-- ENTIDADE -->
    <div class="col-md-6">
        <label asp-for="EntidadeId" class="form-label">Entidade (repasse)</label>
        <select asp-for="EntidadeId"
                class="form-select"
                asp-items="ViewBag.Entidades"
                id="EntidadeId">
            <option value="">-- selecione --</option>
        </select>
        <span asp-validation-for="EntidadeId" class="text-danger"></span>
    </div>

    <div class="col-md-3">
        <label asp-for="Numero" class="form-label">Número do Acordo</label>
        <input asp-for="Numero" class="form-control" id="Numero" />
        <span asp-validation-for="Numero" class="text-danger"></span>
    </div>

    <div class="col-md-3">
        <label asp-for="Valor" class="form-label">Valor acordado</label>
        <input asp-for="Valor" type="number" step="0.01" inputmode="decimal" class="form-control" id="Valor" />
        <span asp-validation-for="Valor" class="text-danger"></span>
    </div>

    <div class="col-md-12">
        <label asp-for="Objeto" class="form-label">Objeto do Termo</label>
        <textarea asp-for="Objeto" class="form-control" rows="3" maxlength="4000"></textarea>
        <span asp-validation-for="Objeto" class="text-danger"></span>
    </div>

    <div class="col-md-3">
        <label asp-for="DataInicio" class="form-label">Data de Início</label>
        <input asp-for="DataInicio" type="date" class="form-control" id="DataInicio"/>
        <span asp-validation-for="DataInicio" class="text-danger"></span>
    </div>

    <div class="col-md-3">
        <label asp-for="DataFim" class="form-label">Data de Fim</label>
        <input asp-for="DataFim" type="date" class="form-control" id="DataFim"/>
        <span asp-validation-for="DataFim" class="text-danger"></span>
    </div>

    <div class="col-md-3">
        <label asp-for="DataAssinatura" class="form-label">Data de Assinatura</label>
        <input asp-for="DataAssinatura" type="date" class="form-control" id="DataAssinatura"/>
        <span asp-validation-for="DataAssinatura" class="text-danger"></span>
    </div>

    <div class="col-md-3 d-flex align-items-center">
        <div class="form-check mt-4">
            <input asp-for="Ativo" class="form-check-input" id="Ativo" />
            <label asp-for="Ativo" class="form-check-label">Ativo</label>
        </div>
    </div>

    <div class="col-md-12">
        <label asp-for="Observacao" class="form-label">Observações</label>
        <textarea asp-for="Observacao" class="form-control" rows="2"></textarea>
        <span asp-validation-for="Observacao" class="text-danger"></span>
    </div>

    <div class="col-12 d-flex gap-2">
        <button type="submit" class="btn btn-success" id="btnSubmit">
            @(Model.Id == 0 ? "Salvar" : "Atualizar")
        </button>
        <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
    </div>
</form>

@if (Model.Id != 0)
{
    <!-- Modal com histórico -->
    <div class="modal fade" id="modalHistorico" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Histórico de Aditivos</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body" id="histBody">
                    <div class="text-center">
                        <div class="spinner-border"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const selEntidade   = document.getElementById('EntidadeId');
        const resumoEntidade= document.getElementById('resumoEntidade');
        const resumoValor   = document.getElementById('resumoValor');
        const resumoPeriodo = document.getElementById('resumoPeriodo');
        const inNumero      = document.getElementById('Numero');
        const inValor       = document.getElementById('Valor');
        const di            = document.getElementById('DataInicio');
        const df            = document.getElementById('DataFim');
        const da            = document.getElementById('DataAssinatura');

        const MIN_STR = '2020-01-01';
        const MIN_Y = 2020, MIN_M = 1, MIN_D = 1;

        // ===== helpers =====
        function atualizarResumo() {
            const optText = selEntidade?.selectedOptions?.length ? selEntidade.selectedOptions[0].text : '(selecione)';
            resumoEntidade.textContent = 'Entidade: ' + (optText || '(selecione)');

            const v = parseFloat((inValor?.value || '').replace(',', '.')) || 0;
            resumoValor.textContent = v.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });

            const d1 = di?.value, d2 = df?.value;
            resumoPeriodo.textContent = (d1 && d2)
                ? new Date(d1).toLocaleDateString('pt-BR') + ' → ' + new Date(d2).toLocaleDateString('pt-BR')
                : 'definir datas';
        }

        function parseYMD(s) {
            const m = /^(\d{4})-(\d{2})-(\d{2})$/.exec(s || '');
            if (!m) return null;
            const y = +m[1], mo = +m[2], d = +m[3];
            if (mo < 1 || mo > 12 || d < 1 || d > 31) return null;
            return { y, mo, d };
        }
        function isBeforeMin(s) {
            const p = parseYMD(s);
            if (!p) return false; // ainda digitando / vazio -> não considera inválido aqui
            if (p.y < MIN_Y) return true;
            if (p.y > MIN_Y) return false;
            if (p.mo < MIN_M) return true;
            if (p.mo > MIN_M) return false;
            return p.d < MIN_D;
        }

        function isCompleteDateStr(s) { return /^\d{4}-\d{2}-\d{2}$/.test(s || ''); }

        function suggestNumeroIfEmpty() {
            if (!di || !inNumero) return;
            const numeroAtual = (inNumero.value || '').trim();
            const d = di.value;
            if (numeroAtual !== '' || !isCompleteDateStr(d)) return;
            const ano = d.substring(0, 4);
            fetch(`/TipoAcordos/SugerirNumero?ano=${encodeURIComponent(ano)}`)
                .then(r => r.ok ? r.json() : null)
                .then(j => { if (j?.proximoNumero && (inNumero.value || '').trim() === '') inNumero.value = j.proximoNumero; })
                .catch(() => {});
        }

        // ===== binds =====
        selEntidade?.addEventListener('change', atualizarResumo);
        inValor?.addEventListener('input', atualizarResumo);
        di?.addEventListener('change', () => { atualizarResumo(); suggestNumeroIfEmpty(); });
        df?.addEventListener('change', atualizarResumo);
        da?.addEventListener('change', () => { /* nada automático */ });

        atualizarResumo();

        // Sugestão do número na criação, se já tiver data válida
        @if (Model.Id == 0)
        {
            <text>suggestNumeroIfEmpty();</text>
        }

        // ===== histórico via AJAX =====
        const acordoId = @Model.Id;
        const modal = document.getElementById('modalHistorico');
        const bodyDiv = document.getElementById('histBody');
        if (modal) {
            const loadHistPage = pag => {
                bodyDiv.innerHTML = '<div class="text-center"><div class="spinner-border"></div></div>';
                fetch(`/TipoAcordos/HistoricoPagina/${acordoId}?pag=${pag}`)
                    .then(r => r.text())
                    .then(html => {
                        bodyDiv.innerHTML = html;
                        bodyDiv.querySelectorAll('.hist-page-link')
                            .forEach(a => a.addEventListener('click', e => {
                                e.preventDefault();
                                loadHistPage(a.dataset.pagina);
                            }));
                    });
            };
            modal.addEventListener('shown.bs.modal', () => loadHistPage(1));
        }

        // ===== validação (só no SUBMIT) + confirmação =====
        const form = document.getElementById('formAcordo');
        form.addEventListener('submit', async (e) => {
            const v = parseFloat((inValor?.value || '').replace(',', '.')) || 0;

            // validações
            if (!selEntidade.value) {
                e.preventDefault();
                return Swal.fire({ icon: 'warning', title: 'Selecione a Entidade', text: 'O repasse precisa estar vinculado a uma Entidade.' });
            }
            if (v <= 0) {
                e.preventDefault();
                return Swal.fire({ icon: 'warning', title: 'Valor inválido', text: 'Informe um valor maior que zero.' });
            }

            // datas >= 2020-01-01
            if (isBeforeMin(di?.value) || isBeforeMin(df?.value) || isBeforeMin(da?.value)) {
                e.preventDefault();
                return Swal.fire({
                    icon: 'warning',
                    title: 'Data inválida',
                    text: 'As datas devem ser a partir de 01/01/2020.'
                });
            }

            // intervalo coerente
            if (isCompleteDateStr(di.value) && isCompleteDateStr(df.value) && new Date(df.value) < new Date(di.value)) {
                e.preventDefault();
                return Swal.fire({ icon: 'warning', title: 'Período inválido', text: 'A Data de Fim não pode ser anterior à Data de Início.' });
            }

            // confirmação
            e.preventDefault();
            const confirm = await Swal.fire({
                icon: 'question',
                title: '@(Model.Id == 0 ? "Confirmar criação do repasse?" : "Confirmar atualização do repasse?")',
                showCancelButton: true,
                confirmButtonText: '@(Model.Id == 0 ? "Salvar" : "Atualizar")',
                cancelButtonText: 'Cancelar'
            });
            if (confirm.isConfirmed) form.submit();
        });

        // mensagens do TempData
        const msgSucesso = '@(TempData["Sucesso"] ?? "")';
        const msgErro = '@(TempData["Erro"] ?? "")';
        if (msgSucesso) Swal.fire({ icon: 'success', title: 'Sucesso', text: msgSucesso });
        if (msgErro) Swal.fire({ icon: 'error', title: 'Ops', text: msgErro });
    });
    </script>

    <style>
        .card .badge.bg-info-subtle {
            background: #e6f4ff !important;
            color: #0b6bcb !important;
        }
        .modal-header { border-bottom: none; }
        .table thead.table-light th { background-color: #0d6efd20; }
        .pagination .page-item.active .page-link {
            background: #0d6efd;
            border-color: #0d6efd;
        }
    </style>
}