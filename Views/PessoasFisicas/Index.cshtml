@model IEnumerable<Financeiro.Models.ViewModels.PessoaFisicaListaViewModel>
@using System.Linq

@{
    ViewData["Title"] = "Pessoas Físicas";
    Layout = "_Layout";
}

@functions {
    string FormatCpf(string? cpf)
    {
        if (string.IsNullOrWhiteSpace(cpf)) return "";
        var d = new string(cpf.Where(char.IsDigit).ToArray());
        if (d.Length != 11) return cpf ?? "";
        return $"{d[..3]}.{d.Substring(3,3)}.{d.Substring(6,3)}-{d.Substring(9,2)}";
    }

    string FormatPhoneBr(string? phone)
    {
        if (string.IsNullOrWhiteSpace(phone)) return "";
        var d = new string(phone.Where(char.IsDigit).ToArray());
        if (d.Length == 10)
            return $"({d[..2]}) {d.Substring(2,4)}-{d.Substring(6,4)}";
        if (d.Length == 11)
            return $"({d[..2]}) {d.Substring(2,5)}-{d.Substring(7,4)}";
        return phone;
    }
}

<!-- Flags para toasts -->
<div id="pageFlags"
     data-success="@TempData["Sucesso"]"
     data-error="@TempData["Erro"]"></div>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="fw-bold text-primary mb-0">@ViewData["Title"]</h2>
    <a asp-action="Novo" class="btn btn-primary">
        <i class="bx bx-user-plus me-1"></i> Nova Pessoa Física
    </a>
</div>

<form id="af-token-form" class="d-none">@Html.AntiForgeryToken()</form>

<div class="row g-3">
@foreach (var item in Model)
{
    var pf = item.Pessoa;
    <div class="col-12 col-md-6 col-lg-4" data-id="@pf.Id">
        <div class="card shadow-sm h-100 pf-card">
            <div class="card-body d-flex flex-column">
                <div class="d-flex align-items-start justify-content-between">
                    <div>
                        <h5 class="card-title mb-1">@pf.Nome @pf.Sobrenome</h5>
                        <div class="small text-muted num">@FormatCpf(pf.Cpf)</div>
                    </div>
                    <span class="badge @(pf.SituacaoAtiva ? "bg-success" : "bg-secondary")">
                        @(pf.SituacaoAtiva ? "Ativo" : "Inativo")
                    </span>
                </div>

                <!-- Endereço principal -->
                <div class="mt-3">
                    <div class="small text-muted mb-1">Endereço principal</div>
                    <div id="addr-@pf.Id" class="small">
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span> Carregando…
                    </div>
                </div>

                <!-- Conta principal -->
                <div class="mt-3">
                    <div class="small text-muted mb-1">
                        <i class="bx bx-bank me-1"></i> Conta bancária (principal)
                    </div>
                    <div id="acc-@pf.Id" class="small">
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span> Carregando…
                    </div>

                    <div class="mt-2 d-flex gap-2">
                        <a class="btn btn-sm btn-outline-success"
                           asp-controller="ContasBancarias"
                           asp-action="Novo"
                           asp-route-pessoaId="@pf.Id"
                           asp-route-pf="true">
                            <i class='bx bx-plus-circle'></i> Nova conta
                        </a>

                        <a class="btn btn-sm btn-outline-secondary"
                           asp-controller="ContasBancarias"
                           asp-action="IndexPF"
                           asp-route-pessoaId="@pf.Id">
                            <i class='bx bx-list-ul'></i> Ver todas
                        </a>
                    </div>
                </div>

                <div class="mt-3 small">
                    <div><i class="bx bx-envelope me-1"></i>@pf.Email</div>
                    <div class="num"><i class="bx bx-phone me-1"></i>@FormatPhoneBr(pf.Telefone)</div>
                </div>

                <div class="mt-auto d-flex flex-wrap gap-2 pt-3">
                    <a class="btn btn-sm btn-outline-secondary"
                       asp-controller="Enderecos"
                       asp-action="GerenciarPessoaFisica"
                       asp-route-pessoaFisicaId="@pf.Id">
                        <i class='bx bx-map'></i> Endereços
                    </a>

                    <a class="btn btn-sm btn-outline-primary"
                       asp-action="Editar"
                       asp-route-id="@pf.Id">
                        <i class='bx bx-pencil'></i> Editar
                    </a>

                    <form asp-action="Excluir"
                          asp-route-id="@pf.Id"
                          method="post"
                          class="d-inline js-delete-pf"
                          data-nome="@pf.Nome @pf.Sobrenome">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-sm btn-outline-danger">
                            <i class='bx bx-trash'></i> Excluir
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
</div>

@section Scripts {
<script>
(function () {
    const base = '@Url.Content("~")'.replace(/\/?$/, '/');

    // Toasts (TempData)
    (function () {
        const flags = document.getElementById("pageFlags");
        if (!flags) return;
        const ok   = (flags.dataset.success || "").trim();
        const err  = (flags.dataset.error   || "").trim();
        if (ok)  Swal.fire({ text: ok,  icon:"success" });
        if (err) Swal.fire({ text: err, icon:"error"   });
    })();

    // Endereço principal
    function formatEndereco(e) {
        if (!e) return "<span class='badge bg-secondary'><i class='bx bx-minus me-1'></i> Sem principal</span>";
        const l1 = [e.logradouro ?? e.Logradouro, e.numero  ?? e.Numero ].filter(Boolean).join(', ');
        const l2 = [e.bairro     ?? e.Bairro,     e.municipio??e.Municipio].filter(Boolean).join(' - ');
        const l3 = [e.uf         ?? e.Uf,         e.cep      ?? e.Cep     ].filter(Boolean).join(' • ');
        return [l1,l2,l3].filter(Boolean).join("<br>");
    }

    function mask(val) {
        if (!val) return '';
        const s = String(val);
        if (s.length <= 2) return '*'.repeat(s.length);
        return s[0] + '*'.repeat(s.length-2) + s[s.length-1];
    }

    function renderPrincipal(slot, acc, pfId) {
        if (!acc) {
            slot.innerHTML = `<span class='badge bg-secondary'><i class='bx bx-minus me-1'></i> Sem principal</span>`;
            return;
        }
        const banco = acc.banco ?? acc.Banco ?? '';
        const agencia = acc.agencia ?? acc.Agencia ?? '';
        const conta = acc.conta ?? acc.Conta ?? '';
        const pix = acc.chavePix ?? acc.ChavePix ?? '';
        const vinc = acc.vinculoId ?? acc.VinculoId;
        slot.innerHTML = `
          <div class="acc-item">
            <div class="acc-main">
              <div><strong>${banco}</strong>
                <span class="acc-chip chip-principal ms-2"><i class='bx bxs-star me-1'></i> Principal</span>
              </div>
              <div class="acc-muted">
                Agência: <span class="secret" data-secret>${mask(agencia)}</span> ·
                Conta: <span class="secret" data-secret>${mask(conta)}</span>
                ${pix?` · Pix: <span class="secret" data-secret>${mask(pix)}</span>`:''}
              </div>
            </div>
          </div>`;
    }

    async function loadPrincipalAccountFor(id) {
        const slot = document.getElementById(`acc-${id}`);
        if (!slot) return;
        slot.innerHTML = `<span class="spinner-border spinner-border-sm me-1" role="status"></span> Carregando…`;
        try{
            const r = await fetch(`${base}ContasBancarias/PessoaFisica/${id}/Principal`);
            const j = await r.json();
            renderPrincipal(slot, j.possuiPrincipal? j.conta : null, id);
        }catch{ slot.textContent = "Erro"; }
    }

    // Carregar dados de cada cartão
    document.querySelectorAll('[data-id]').forEach(function(card){
        const id = card.getAttribute('data-id');

        // Endereço principal
        const slotAddr = document.getElementById(`addr-${id}`);
        fetch(`${base}Enderecos/PessoaFisica/${id}/Principal`)
          .then(r=>r.json())
          .then(j=>{ slotAddr.innerHTML = j.possuiPrincipal ? formatEndereco(j.endereco) : "<span class='badge bg-secondary'><i class='bx bx-minus me-1'></i> Sem principal</span>"; })
          .catch(()=>{ slotAddr.textContent = "Erro"; });

        // Conta principal
        loadPrincipalAccountFor(id);
    });

    // Confirmação de exclusão
    document.addEventListener("submit", function(e){
        const form = e.target;
        if(!form.matches(".js-delete-pf")) return;

        e.preventDefault();
        const nome = form.getAttribute("data-nome") || "";
        Swal.fire({
            title: "Excluir pessoa física?",
            text:  `Tem certeza que deseja excluir "${nome}"? Essa ação é irreversível.`,
            icon:  "warning",
            showCancelButton: true,
            confirmButtonText: "Sim, excluir",
            cancelButtonText:  "Cancelar"
        }).then(r => { if (r.isConfirmed) form.submit(); });
    });
})();
</script>
}