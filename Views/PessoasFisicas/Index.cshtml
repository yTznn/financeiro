@model IEnumerable<Financeiro.Models.ViewModels.PessoaFisicaListaViewModel>
@using System.Linq

@{
    ViewBag.Title = "Pessoas Físicas";
    Layout = "_Layout";
}

@functions {
    // 000.000.000-00
    string FormatCpf(string? cpf)
    {
        if (string.IsNullOrWhiteSpace(cpf)) return "";
        var d = new string(cpf.Where(char.IsDigit).ToArray());
        if (d.Length != 11) return cpf ?? "";
        return $"{d[..3]}.{d.Substring(3,3)}.{d.Substring(6,3)}-{d.Substring(9,2)}";
    }

    // (00) 0000-0000 ou (00) 00000-0000
    string FormatPhoneBr(string? phone)
    {
        if (string.IsNullOrWhiteSpace(phone)) return "";
        var d = new string(phone.Where(char.IsDigit).ToArray());
        if (d.Length == 10) // fixo
            return $"({d[..2]}) {d.Substring(2,4)}-{d.Substring(6,4)}";
        if (d.Length == 11) // celular
            return $"({d[..2]}) {d.Substring(2,5)}-{d.Substring(7,4)}";
        return phone; // mantém como veio se não encaixar
    }
}

<style>
    .pf-card{ border-left:4px solid var(--primary); transition:transform .06s ease, box-shadow .06s ease; }
    .pf-card:hover{ transform:translateY(-1px); box-shadow:0 .25rem .75rem rgba(16,36,68,.08); }
    .num { font-variant-numeric: tabular-nums; letter-spacing:.2px; }

    /* contas (apenas principal) */
    .acc-item { border:1px solid #e9ecef; border-radius:.5rem; padding:.6rem .75rem; display:flex; align-items:start; gap:.5rem; }
    .acc-main { flex:1; }
    .acc-muted { color:#6c757d; font-size:.85rem; }
    .acc-actions .btn { padding:.25rem .5rem; }
    .acc-chip { font-size:.75rem; padding:.15rem .4rem; border-radius:999px; }
    .chip-principal { background:#fff3cd; color:#8a6d3b; border:1px solid #ffe8a1; }
    .secret { filter: blur(3px); transition: filter .15s ease; }
    .secret.show { filter: none; }
</style>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="fw-bold text-primary mb-0">@ViewBag.Title</h2>
    <a asp-action="Novo" class="btn btn-primary">
        <i class="bx bx-user-plus me-1"></i> Nova Pessoa Física
    </a>
</div>

<!-- Antiforgery token para AJAX -->
<form id="af-token-form" class="d-none">@Html.AntiForgeryToken()</form>

<div class="row g-3">
@foreach (var item in Model)
{
    var pf = item.Pessoa;
    <div class="col-12 col-md-6 col-lg-4" data-id="@pf.Id">
        <div class="card shadow-sm h-100 pf-card">
            <div class="card-body d-flex flex-column">
                <div class="d-flex align-items-start justify-content-between">
                    <div>
                        <h5 class="card-title mb-1">@pf.Nome @pf.Sobrenome</h5>
                        <div class="small text-muted num">@FormatCpf(pf.Cpf)</div>
                    </div>
                    <span class="badge @(pf.SituacaoAtiva ? "bg-success" : "bg-secondary")">
                        @(pf.SituacaoAtiva ? "Ativo" : "Inativo")
                    </span>
                </div>

                <div class="mt-3">
                    <div class="small text-muted mb-1">Endereço principal</div>
                    <div id="addr-@pf.Id" class="small">
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                        Carregando…
                    </div>
                </div>

                <!-- Conta bancária (somente principal) -->
                <div class="mt-3">
                    <div class="small text-muted mb-1">
                        <i class="bx bx-bank me-1"></i> Conta bancária (principal)
                    </div>

                    <div id="acc-@pf.Id" class="small">
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                        Carregando…
                    </div>

                    <div class="mt-2 d-flex gap-2">
                        <a class="btn btn-sm btn-outline-success"
                           asp-controller="ContasBancarias"
                           asp-action="Novo"
                           asp-route-pessoaId="@pf.Id"
                           asp-route-pf="true">
                            <i class='bx bx-plus-circle'></i> Nova conta
                        </a>

                        <a class="btn btn-sm btn-outline-secondary"
                           asp-controller="ContasBancarias"
                           asp-action="IndexPF"
                           asp-route-pessoaId="@pf.Id">
                            <i class='bx bx-list-ul'></i> Ver todas
                        </a>
                    </div>
                </div>

                <div class="mt-3 small">
                    <div><i class="bx bx-envelope me-1"></i>@pf.Email</div>
                    <div class="num"><i class="bx bx-phone me-1"></i>@FormatPhoneBr(pf.Telefone)</div>
                </div>

                <div class="mt-auto d-flex flex-wrap gap-2 pt-3">
                    <a class="btn btn-sm btn-outline-secondary"
                       asp-controller="Enderecos"
                       asp-action="GerenciarPessoaFisica"
                       asp-route-pessoaFisicaId="@pf.Id" title="Endereços">
                        <i class='bx bx-map'></i> Endereços
                    </a>

                    <a class="btn btn-sm btn-outline-primary"
                       asp-action="Editar"
                       asp-route-id="@pf.Id">
                        <i class='bx bx-pencil'></i> Editar
                    </a>
                </div>
            </div>
        </div>
    </div>
}
</div>

@section Scripts {
<script>
(function () {
    const base = '@Url.Content("~")'.replace(/\/?$/, '/');

    // ====== antiforgery ======
    function getRequestVerificationToken() {
        const form = document.getElementById('af-token-form');
        const inp = form ? form.querySelector('input[name="__RequestVerificationToken"]') : null;
        return inp ? inp.value : null;
    }

    // ====== Endereço principal (já existia) ======
    function formatEndereco(e) {
        if (!e) return "<span class='badge bg-secondary'><i class='bx bx-minus me-1'></i> Sem principal</span>";
        const log = e.logradouro ?? e.Logradouro ?? "";
        const num = e.numero ?? e.Numero ?? "";
        const bai = e.bairro ?? e.Bairro ?? "";
        const mun = e.municipio ?? e.Municipio ?? "";
        const uf  = e.uf ?? e.Uf ?? "";
        const cep = e.cep ?? e.Cep ?? "";

        const linha1 = [log, num].filter(Boolean).join(", ");
        const linha2 = [bai, mun].filter(Boolean).join(" - ");
        const linha3 = [uf, cep].filter(Boolean).join(" • ");

        return [linha1, linha2, linha3].filter(Boolean).join("<br>");
    }

    // ====== helpers de conta ======
    function mask(val) {
        if (!val) return '';
        const t = String(val);
        if (t.length <= 2) return '*'.repeat(t.length);
        return t[0] + '*'.repeat(t.length - 2) + t[t.length - 1];
    }

    function renderPrincipal(slot, acc, pessoaId){
        if (!acc) {
            slot.innerHTML = `<span class='badge bg-secondary'><i class='bx bx-minus me-1'></i> Sem principal</span>`;
            return;
        }

        const banco     = acc.banco ?? acc.Banco ?? '';
        const agencia   = acc.agencia ?? acc.Agencia ?? '';
        const conta     = acc.conta ?? acc.Conta ?? '';
        const pix       = acc.chavePix ?? acc.ChavePix ?? '';
        const vinculoId = acc.vinculoId ?? acc.VinculoId;

        slot.innerHTML = `
          <div class="acc-item" data-vinculo="${vinculoId}">
            <div class="acc-main">
              <div><strong>${banco || '(Sem banco)'}</strong>
                <span class="acc-chip chip-principal ms-2">
                  <i class='bx bxs-star me-1'></i> Principal
                </span>
              </div>
              <div class="acc-muted">
                Agência: <span class="secret" data-secret>${mask(agencia)}</span> ·
                Conta: <span class="secret" data-secret>${mask(conta)}</span>
                ${pix ? ` · Pix: <span class="secret" data-secret>${mask(pix)}</span>` : ``}
              </div>
            </div>
            <div class="acc-actions d-flex gap-1">
              <button class="btn btn-light border toggle-visibility" title="Mostrar/ocultar">
                <i class='bx bx-low-vision'></i>
              </button>
              <a class="btn btn-light border" href="${base}ContasBancarias/Editar?vinculoId=${vinculoId}" title="Editar">
                <i class='bx bx-pencil'></i>
              </a>
              <a class="btn btn-light border" href="${base}ContasBancarias/IndexPF?pessoaId=${pessoaId}" title="Ver todas">
                <i class='bx bx-list-ul'></i>
              </a>
            </div>
          </div>`;

        slot.querySelector('.toggle-visibility')?.addEventListener('click', function(e){
            e.preventDefault();
            slot.querySelectorAll('[data-secret]').forEach(s => s.classList.toggle('show'));
        });
    }

    async function loadPrincipalAccountFor(pfId) {
        const slot = document.getElementById(`acc-${pfId}`);
        if (!slot) return;
        slot.innerHTML = `<span class="spinner-border spinner-border-sm me-1" role="status"></span> Carregando…`;
        try {
            const url = `${base}ContasBancarias/PessoaFisica/${pfId}/Principal`;
            const r = await fetch(url, { headers: { "X-Requested-With": "XMLHttpRequest" } });
            if (!r.ok) throw new Error(`HTTP ${r.status}`);
            const j = await r.json();
            if (!j?.sucesso) { slot.classList.add("text-danger"); slot.textContent = "Falha ao carregar"; return; }
            renderPrincipal(slot, j.possuiPrincipal ? j.conta : null, pfId);
        } catch {
            slot.classList.add("text-danger"); slot.textContent = "Erro";
        }
    }

    // ====== carregar endereços + conta principal por cartão ======
    document.querySelectorAll("[data-id]").forEach(function (wrap) {
        const id = wrap.getAttribute("data-id");

        // Endereço principal
        const slotAddr = document.getElementById(`addr-${id}`);
        const urlAddr  = `${base}Enderecos/PessoaFisica/${id}/Principal`;
        fetch(urlAddr, { headers: { "X-Requested-With": "XMLHttpRequest" } })
          .then(r => { if (!r.ok) throw new Error(`HTTP ${r.status}`); return r.json(); })
          .then(j => {
              if(!j?.sucesso) { slotAddr.classList.add("text-danger"); slotAddr.textContent = "Falha ao carregar"; return; }
              slotAddr.innerHTML = j.possuiPrincipal ? formatEndereco(j.endereco)
                                   : "<span class='badge bg-secondary'><i class='bx bx-minus me-1'></i> Sem principal</span>";
          })
          .catch(() => { slotAddr.classList.add("text-danger"); slotAddr.textContent = "Erro"; });

        // Conta principal
        loadPrincipalAccountFor(id);
    });
})();
</script>
}